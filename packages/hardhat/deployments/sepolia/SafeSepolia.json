{
  "address": "0x1eD8fd8e8Ad26a88bB5261068776f73ECad9a6f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ghoSafeIDSepolia",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loanAdvertisementBook",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_referralCode",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ghoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtGhoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ETHTtransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreditDelegateApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ERC20WithdrawnFromSafe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ETHWithdrawnFromSafe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "ReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenBorrowedFromAave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRepaidToAave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSuppliedToAave",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawnFromAave",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "contract IAccessManagerSepolia",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_LOAN_MANAGER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_MAILBOX_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveDelegateCreditGho",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowFromAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrowGho",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getSafeBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repayGho",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rateMode",
          "type": "uint256"
        }
      ],
      "name": "repayToAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "supplyToAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETHFromSafe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x50f9f86e2dec6f075ed893aa31a1d178901cc6f09791c3303e08b8f85f59d6a2",
  "receipt": {
    "to": null,
    "from": "0x065A4d3E3727D6826fa81e88c00b2937f8A25D1c",
    "contractAddress": "0x1eD8fd8e8Ad26a88bB5261068776f73ECad9a6f3",
    "transactionIndex": 56,
    "gasUsed": "7438068",
    "logsBloom": "0x
    "blockHash": "0x743b73c4a8b73a70dd068d0fcf9fff6a581d3684218e160d0442d1e1411e26d9",
    "transactionHash": "0x50f9f86e2dec6f075ed893aa31a1d178901cc6f09791c3303e08b8f85f59d6a2",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 5116342,
        "transactionHash": "0x50f9f86e2dec6f075ed893aa31a1d178901cc6f09791c3303e08b8f85f59d6a2",
        "address": "0x08C0712FFF89bD95De9A89669fFAF8a249da4E2e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ed8fd8e8ad26a88bb5261068776f73ecad9a6f3",
          "0x0000000000000000000000001ed8fd8e8ad26a88bb5261068776f73ecad9a6f3"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0x743b73c4a8b73a70dd068d0fcf9fff6a581d3684218e160d0442d1e1411e26d9"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 5116342,
        "transactionHash": "0x50f9f86e2dec6f075ed893aa31a1d178901cc6f09791c3303e08b8f85f59d6a2",
        "address": "0x08C0712FFF89bD95De9A89669fFAF8a249da4E2e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e",
          "0x000000000000000000000000065a4d3e3727d6826fa81e88c00b2937f8a25d1c",
          "0x0000000000000000000000001ed8fd8e8ad26a88bb5261068776f73ecad9a6f3"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x743b73c4a8b73a70dd068d0fcf9fff6a581d3684218e160d0442d1e1411e26d9"
      }
    ],
    "blockNumber": 5116342,
    "cumulativeGasUsed": "11772348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77D08C620728194fF1A4b3dA458f04975568CF1e",
    "0x8E3cDEA3e6e439a49c7958d0bB76254E786b5266",
    0,
    "0xc4bF5CbDaBE595361438F8c6a187bDc330539c60",
    "0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844",
    "0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951",
    "0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59",
    "0x779877A7B0D9E8603169DdbD7836e478b4624789",
    "0x065A4d3E3727D6826fa81e88c00b2937f8A25D1c"
  ],
  "numDeployments": 4,
  "solcInputHash": "f90885ad28d2243ba68e52f31a623496",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ghoSafeIDSepolia\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loanAdvertisementBook\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ghoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtGhoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ETHTtransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditDelegateApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ERC20WithdrawnFromSafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ETHWithdrawnFromSafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenBorrowedFromAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRepaidToAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSuppliedToAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawnFromAave\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"contract IAccessManagerSepolia\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_LOAN_MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_MAILBOX_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegateCreditGho\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowFromAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowGho\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getSafeBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayGho\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"}],\"name\":\"repayToAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplyToAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHFromSafe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"GhoSafe Protocol\",\"events\":{\"CreditDelegateApproved(address,uint256)\":{\"params\":{\"amount\":\"Amount of GHO approved\",\"delegatee\":\"Address of the delegatee\"}},\"ERC20WithdrawnFromSafe(address,uint256,address)\":{\"params\":{\"amount\":\"Amount of the token withdrawn\",\"to\":\"Address that received the token\",\"token\":\"Address of the token withdrawn\"}},\"ETHWithdrawnFromSafe(uint256,address)\":{\"params\":{\"amount\":\"Amount of ETH withdrawn\",\"to\":\"Address that received the ETH\"}},\"OwnerAdded(address)\":{\"params\":{\"owner\":\"Address of the new owner\"}},\"OwnerRemoved(address)\":{\"params\":{\"owner\":\"Address of the removed owner\"}},\"ReceivedETH(uint256,address)\":{\"params\":{\"amount\":\"Amount of ETH received\",\"from\":\"Address that sent the ETH\"}},\"TokenBorrowedFromAave(address,uint256)\":{\"params\":{\"amount\":\"Amount of the token borrowed\",\"token\":\"Address of the token borrowed\"}},\"TokenRepaidToAave(address,uint256)\":{\"params\":{\"amount\":\"Amount of the token repaid\",\"token\":\"Address of the token repaid\"}},\"TokenSuppliedToAave(address,uint256)\":{\"params\":{\"amount\":\"Amount of the token supplied\",\"token\":\"Address of the token supplied\"}},\"TokenWithdrawnFromAave(address,uint256)\":{\"params\":{\"amount\":\"Amount of the token withdrawn\",\"token\":\"Address of the token withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"params\":{\"_owner\":\"Address of the owner to add\"}},\"approveDelegateCreditGho(address,uint256)\":{\"params\":{\"_amount\":\"Amount of GHO to approve\",\"_delegatee\":\"Address of the delegatee\"}},\"borrowFromAave(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of the token to borrow\",\"_interestRateMode\":\"Interest rate mode for the borrow\",\"_token\":\"Address of the ERC20 token\"}},\"borrowGho(uint256)\":{\"params\":{\"_amount\":\"Amount of GHO to borrow\"}},\"constructor\":{\"params\":{\"_debtGhoToken\":\"Address of the Credit Delegation Token for GHO\",\"_ghoSafeIDSepolia\":\"Address of the GhoSafeIDSepolia contract\",\"_ghoToken\":\"Address of the GHO token\",\"_link\":\"Address of the LINK token\",\"_loanAdvertisementBook\":\"Address of the LoanAdvertisementBook contract\",\"_owner\":\"Address of the owner\",\"_pool\":\"Address of the Aave pool\",\"_referralCode\":\"Referral code for Aave interactions\",\"_router\":\"Address of the router contract\"}},\"getSafeBalances(address[])\":{\"params\":{\"_tokens\":\"Addresses of the ERC20 tokens to check\"},\"returns\":{\"balances\":\"Balances of the specified tokens\"}},\"removeOwner(address)\":{\"params\":{\"_owner\":\"Address of the owner to remove\"}},\"repayGho(uint256)\":{\"params\":{\"_amount\":\"Amount of GHO to repay\"}},\"repayToAave(address,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of the token to repay\",\"_rateMode\":\"Interest rate mode for the repay\",\"_token\":\"Address of the ERC20 token\"}},\"supplyToAave(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the token to supply\",\"_token\":\"Address of the ERC20 token\"}},\"withdrawETHFromSafe(address,uint256)\":{\"params\":{\"_amount\":\"Amount of ETH to withdraw\",\"_to\":\"Address that will receive the ETH\"}},\"withdrawFromAave(address,uint256)\":{\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_token\":\"Address of the ERC20 token\"}},\"withdrawFromSafe(address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_to\":\"Address that will receive the token\",\"_token\":\"Address of the ERC20 token\"}}},\"stateVariables\":{\"AAVE_POOL\":{\"details\":\"Aave's lending pool address on Sepolia: https://sepolia.etherscan.io/address/0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951\"},\"DEBT_GHO_TOKEN\":{\"details\":\"Credit Delegation Token for GHO on Sepolia: https://sepolia.etherscan.io/address/0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844\"},\"GHO_TOKEN\":{\"details\":\"GHO token address on Sepolia: https://sepolia.etherscan.io/address/0xc4bF5CbDaBE595361438F8c6a187bDc330539c60\"}},\"title\":\"SafeSepolia Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ETHTtransferFailed(bytes)\":[{\"notice\":\"ETH transfer failed error\"}],\"NotEnoughBalance(address,uint256,uint256)\":[{\"notice\":\"Not enough balance error\"}],\"UnauthorizedAccess(address)\":[{\"notice\":\"Unauthorized access error\"}]},\"events\":{\"CreditDelegateApproved(address,uint256)\":{\"notice\":\"Event emitted when a delegatee is approved to spend a specific amount of GHO\"},\"ERC20WithdrawnFromSafe(address,uint256,address)\":{\"notice\":\"Event emitted when a ERC20 is withdrawn from the safe\"},\"ETHWithdrawnFromSafe(uint256,address)\":{\"notice\":\"Event emitted when ETH is withdrawn from the safe\"},\"OwnerAdded(address)\":{\"notice\":\"Event emitted when a new owner is added\"},\"OwnerRemoved(address)\":{\"notice\":\"Event emitted when an owner is removed\"},\"ReceivedETH(uint256,address)\":{\"notice\":\"Event emitted ETH is received by the contract\"},\"TokenBorrowedFromAave(address,uint256)\":{\"notice\":\"Event emitted when a ERC20 is borrowed from Aave\"},\"TokenRepaidToAave(address,uint256)\":{\"notice\":\"Event emitted when a ERC20 is repaid to Aave\"},\"TokenSuppliedToAave(address,uint256)\":{\"notice\":\"Event emitted when a ERC20 is supplied to Aave\"},\"TokenWithdrawnFromAave(address,uint256)\":{\"notice\":\"Event emitted when a ERC20 is withdrawn from Aave\"}},\"kind\":\"user\",\"methods\":{\"REFERRAL_CODE()\":{\"notice\":\"Referral code for Aave interactions.\"},\"USER_ACCESS_MANAGER()\":{\"notice\":\"Access manager contract.\"},\"USER_LOAN_MANAGER_ADDRESS()\":{\"notice\":\"Address of the LoanManager contract.\"},\"USER_MAILBOX_ADDRESS()\":{\"notice\":\"Address of the Mailbox contract.\"},\"addOwner(address)\":{\"notice\":\"Adds an owner to the contract.\"},\"approveDelegateCreditGho(address,uint256)\":{\"notice\":\"Approves a delegatee to spend a specific amount of GHO.\"},\"borrowFromAave(address,uint256,uint256)\":{\"notice\":\"Borrows a specific amount of an ERC20 token from Aave.\"},\"borrowGho(uint256)\":{\"notice\":\"Borrows GHO from Aave.\"},\"constructor\":{\"notice\":\"Constructor\"},\"getSafeBalances(address[])\":{\"notice\":\"Returns the balances of the specified tokens\"},\"removeOwner(address)\":{\"notice\":\"Removes an owner from the contract.\"},\"repayGho(uint256)\":{\"notice\":\"Repays GHO to Aave.\"},\"repayToAave(address,uint256,uint256)\":{\"notice\":\"Repays a specific amount of an ERC20 token to Aave.\"},\"supplyToAave(address,uint256)\":{\"notice\":\"Supplies a specific amount of an ERC20 token to Aave.\"},\"withdrawETHFromSafe(address,uint256)\":{\"notice\":\"Withdraws a specific amount of ETH from the contract to a specified address.\"},\"withdrawFromAave(address,uint256)\":{\"notice\":\"Withdraws a specific amount of an ERC20 token from Aave.\"},\"withdrawFromSafe(address,address,uint256)\":{\"notice\":\"Withdraws a specific amount of an ERC20 token from the contract to a specified address.\"}},\"notice\":\"Walet contract for managing funds and interacting with Aave\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sepolia/users/SafeSepolia.sol\":\"SafeSepolia\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/ICreditDelegationToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ICreditDelegationToken\\n * @author Aave\\n * @notice Defines the basic interface for a token supporting credit delegation.\\n */\\ninterface ICreditDelegationToken {\\n  /**\\n   * @dev Emitted on `approveDelegation` and `borrowAllowance\\n   * @param fromUser The address of the delegator\\n   * @param toUser The address of the delegatee\\n   * @param asset The address of the delegated asset\\n   * @param amount The amount being delegated\\n   */\\n  event BorrowAllowanceDelegated(\\n    address indexed fromUser,\\n    address indexed toUser,\\n    address indexed asset,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token.\\n   * Delegation will still respect the liquidation constraints (even if delegated, a\\n   * delegatee cannot force a delegator HF to go below 1)\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The maximum amount being delegated.\\n   */\\n  function approveDelegation(address delegatee, uint256 amount) external;\\n\\n  /**\\n   * @notice Returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return The current allowance of `toUser`\\n   */\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature\\n   * @param delegator The delegator of the credit\\n   * @param delegatee The delegatee that can use the credit\\n   * @param value The amount to be delegated\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v The V signature param\\n   * @param s The S signature param\\n   * @param r The R signature param\\n   */\\n  function delegationWithSig(\\n    address delegator,\\n    address delegatee,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0xab2789bbbf54af9609fbd7fa93595a514866728b3096ede6b69952f98290c997\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0xbfd2077251c8dc766a56d45f4b03eb07f3441323e79c0f794efea3657a99747f\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd59dbf083bfad8fe95248cac59822ade0bc7d70e50ab05e366cb35a2b2ea99f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlDefaultAdminRules} from \\\"./IAccessControlDefaultAdminRules.sol\\\";\\nimport {AccessControl, IAccessControl} from \\\"../AccessControl.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {IERC5313} from \\\"../../interfaces/IERC5313.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\\n * over other roles that may potentially have privileged rights in the system.\\n *\\n * If a specific role doesn't have an admin role assigned, the holder of the\\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\\n *\\n * This contract implements the following risk mitigations on top of {AccessControl}:\\n *\\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\\n *\\n * Example usage:\\n *\\n * ```solidity\\n * contract MyToken is AccessControlDefaultAdminRules {\\n *   constructor() AccessControlDefaultAdminRules(\\n *     3 days,\\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\\n *    ) {}\\n * }\\n * ```\\n */\\nabstract contract AccessControlDefaultAdminRules is IAccessControlDefaultAdminRules, IERC5313, AccessControl {\\n    // pending admin pair read/written together frequently\\n    address private _pendingDefaultAdmin;\\n    uint48 private _pendingDefaultAdminSchedule; // 0 == unset\\n\\n    uint48 private _currentDelay;\\n    address private _currentDefaultAdmin;\\n\\n    // pending delay pair read/written together frequently\\n    uint48 private _pendingDelay;\\n    uint48 private _pendingDelaySchedule; // 0 == unset\\n\\n    /**\\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\\n     */\\n    constructor(uint48 initialDelay, address initialDefaultAdmin) {\\n        if (initialDefaultAdmin == address(0)) {\\n            revert AccessControlInvalidDefaultAdmin(address(0));\\n        }\\n        _currentDelay = initialDelay;\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC5313-owner}.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return defaultAdmin();\\n    }\\n\\n    ///\\n    /// Override AccessControl role management\\n    ///\\n\\n    /**\\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-renounceRole}.\\n     *\\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\\n     * has also passed when calling this function.\\n     *\\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\\n     *\\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\\n     * non-administrated role.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n            }\\n            delete _pendingDefaultAdminSchedule;\\n        }\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_grantRole}.\\n     *\\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\\n     * role has been previously renounced.\\n     *\\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            if (defaultAdmin() != address(0)) {\\n                revert AccessControlEnforcedDefaultAdminRules();\\n            }\\n            _currentDefaultAdmin = account;\\n        }\\n        return super._grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_revokeRole}.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            delete _currentDefaultAdmin;\\n        }\\n        return super._revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super._setRoleAdmin(role, adminRole);\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules accessors\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdmin() public view virtual returns (address) {\\n        return _currentDefaultAdmin;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelay() public view virtual returns (uint48) {\\n        uint48 schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\\n        schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\\n        return 5 days;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _beginDefaultAdminTransfer(newAdmin);\\n    }\\n\\n    /**\\n     * @dev See {beginDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _cancelDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {cancelDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _cancelDefaultAdminTransfer() internal virtual {\\n        _setPendingDefaultAdmin(address(0), 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function acceptDefaultAdminTransfer() public virtual {\\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\\n        if (_msgSender() != newDefaultAdmin) {\\n            // Enforce newDefaultAdmin explicit acceptance.\\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\\n        }\\n        _acceptDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {acceptDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _acceptDefaultAdminTransfer() internal virtual {\\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n        }\\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        delete _pendingDefaultAdmin;\\n        delete _pendingDefaultAdminSchedule;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _changeDefaultAdminDelay(newDelay);\\n    }\\n\\n    /**\\n     * @dev See {changeDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\\n        _setPendingDelay(newDelay, newSchedule);\\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _rollbackDefaultAdminDelay();\\n    }\\n\\n    /**\\n     * @dev See {rollbackDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _rollbackDefaultAdminDelay() internal virtual {\\n        _setPendingDelay(0, 0);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\\n     * become the new {defaultAdminDelay}.\\n     *\\n     * The value returned guarantees that if the delay is reduced, it will go into effect\\n     * after a wait that honors the previously set delay.\\n     *\\n     * See {defaultAdminDelayIncreaseWait}.\\n     */\\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\\n        uint48 currentDelay = defaultAdminDelay();\\n\\n        // When increasing the delay, we schedule the delay change to occur after a period of \\\"new delay\\\" has passed, up\\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\\n        // using milliseconds instead of seconds.\\n        //\\n        // When decreasing the delay, we wait the difference between \\\"current delay\\\" and \\\"new delay\\\". This guarantees\\n        // that an admin transfer cannot be made faster than \\\"current delay\\\" at the time the delay change is scheduled.\\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\\n        return\\n            newDelay > currentDelay\\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\\n                : currentDelay - newDelay;\\n    }\\n\\n    ///\\n    /// Private setters\\n    ///\\n\\n    /**\\n     * @dev Setter of the tuple for pending admin and its schedule.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\\n\\n        _pendingDefaultAdmin = newAdmin;\\n        _pendingDefaultAdminSchedule = newSchedule;\\n\\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\\n        if (_isScheduleSet(oldSchedule)) {\\n            // Emit for implicit cancellations when another default admin was scheduled.\\n            emit DefaultAdminTransferCanceled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Setter of the tuple for pending delay and its schedule.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\\n        uint48 oldSchedule = _pendingDelaySchedule;\\n\\n        if (_isScheduleSet(oldSchedule)) {\\n            if (_hasSchedulePassed(oldSchedule)) {\\n                // Materialize a virtual delay\\n                _currentDelay = _pendingDelay;\\n            } else {\\n                // Emit for implicit cancellations when another delay was scheduled.\\n                emit DefaultAdminDelayChangeCanceled();\\n            }\\n        }\\n\\n        _pendingDelay = newDelay;\\n        _pendingDelaySchedule = newSchedule;\\n    }\\n\\n    ///\\n    /// Private helpers\\n    ///\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\\n     */\\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\\n        return schedule != 0;\\n    }\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\\n     */\\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\\n        return schedule < block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev The new default admin is not a valid default admin.\\n     */\\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\\n\\n    /**\\n     * @dev At least one of the following rules was violated:\\n     *\\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\\n     */\\n    error AccessControlEnforcedDefaultAdminRules();\\n\\n    /**\\n     * @dev The delay for transferring the default admin delay is enforced and\\n     * the operation must wait until `schedule`.\\n     *\\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\\n     */\\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\\n\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x969a4661694319a003d037ccbf7c8310f8994d746b763c933d3f76d906e67203\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5313.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5313.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for the Light Contract Ownership Standard.\\n *\\n * A standardized minimal interface required to identify an account that controls a contract\\n */\\ninterface IERC5313 {\\n    /**\\n     * @dev Gets the address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IAccessManagerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IAccessManagerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IAccessControlDefaultAdminRules } from \\\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\\\";\\n\\n/**\\n * @title IAccessManagerSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the AccessManagerSepolia contract\\n * @dev This interface should be implemented by the AccessManagerSepolia contract.\\n */\\ninterface IAccessManagerSepolia is IAccessControlDefaultAdminRules {\\n\\t/**\\n\\t * @notice Grant owner role to a new address\\n\\t * @param _newOwner Address of the new owner\\n\\t */\\n\\tfunction grantOwnerRole(address _newOwner) external;\\n\\n\\t/**\\n\\t * @notice Revoke owner role from an address\\n\\t * @param _oldOwner Address of the old owner\\n\\t */\\n\\tfunction revokeOwnerRole(address _oldOwner) external;\\n\\n\\t/**\\n\\t * @notice Returns the owner role\\n\\t * @return Owner role\\n\\t */\\n\\tfunction OWNER_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x55ba8d536508f01f5ea38f719b4ef38b2a05c3e495013fa2c12633e579f9ec8e\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IGhoSafeIDSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IGhoSafeIDSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IGhoSafeIDSepolia Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the GhoSafeIDSepolia contract.\\n * @dev This interface should be implemented by the GhoSafeIDSepolia contract.\\n */\\ninterface IGhoSafeIDSepolia {\\n\\t/**\\n\\t * @notice Struct for storing detailed credit score data.\\n\\t * @param loansCount The number of loans taken out by the token owner.\\n\\t * @param totalAmountBorrowed The total amount borrowed by the token owner.\\n\\t * @param totalAmountRepaid The total amount repaid by the token owner.\\n\\t * @param creditScore The credit score of the token owner.\\n\\t **/\\n\\tstruct CreditScoreData {\\n\\t\\tuint256 loansCount;\\n\\t\\tuint256 totalAmountBorrowed;\\n\\t\\tuint256 totalAmountRepaid;\\n\\t\\tuint256 creditScore;\\n\\t}\\n\\n\\t/// @notice Not authorized Caller error\\n\\terror UnauthorizedAccess(address caller);\\n\\t/// @notice Token ID does not exist error\\n\\terror TokenDoesNotExist(uint256 tokenId);\\n\\t/// @notice GhoSafe ID already minted to an address error\\n\\terror GhoSafeIdAlreadyMinted(address owner);\\n\\t/// @notice Transfer not allowed error\\n\\terror TransferNotAllowed();\\n\\t/// @notice Invalid arguments length error\\n\\terror InvalidArgumentsLength(uint256 expected, uint256 actual);\\n\\n\\t/**\\n\\t * @notice Event emitted when a new GhoSafe ID is minted.\\n\\t * @param tokenId The ID of the GhoSafe ID.\\n\\t * @param owner The address of the GhoSafe ID owner.\\n\\t * @param creditScore The credit score of the GhoSafe ID.\\n\\t **/\\n\\tevent GhoSafeIdMinted(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 creditScore\\n\\t);\\n\\n\\t/**\\n\\t * @notice Event emitted when a GhoSafe ID's credit score is updated.\\n\\t * @param tokenId The ID of the GhoSafe ID.\\n\\t * @param creditScore The credit score of the GhoSafe ID.\\n\\t **/\\n\\tevent CreditScoreUpdated(uint256 indexed tokenId, uint256 creditScore);\\n\\n\\t/**\\n\\t * @notice Retrieves the credit score data of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @return creditScoreData The credit score data.\\n\\t */\\n\\tfunction creditScoreDataOf(\\n\\t\\tuint256 _tokenId\\n\\t) external view returns (CreditScoreData memory creditScoreData);\\n\\n\\t/**\\n\\t * @notice Retrieves the GhoSafe ID of a specific address.\\n\\t * @param _owner The address.\\n\\t * @return tokenId The GhoSafe ID.\\n\\t */\\n\\tfunction ghoSafeIdOf(\\n\\t\\taddress _owner\\n\\t) external view returns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @notice Retrieves the balance of a specific address.\\n\\t * @param _owner The address.\\n\\t * @return balance The balance.\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Retrieves the owner of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @return owner The owner.\\n\\t */\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @notice Checks if the contract implements a specific interface.\\n\\t * @param _interfaceId The interface identifier.\\n\\t * @return isSupported True if the contract implements the interface.\\n\\t */\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 _interfaceId\\n\\t) external view returns (bool isSupported);\\n\\n\\t/**\\n\\t * @notice Returns the URI of the token metadata.\\n\\t * @param _tokenId The token ID.\\n\\t * @return tokenURI The token URI.\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score.\\n\\t * @param _tokenURI The token URI.\\n\\t */\\n\\tfunction safeMint(\\n\\t\\taddress _to,\\n\\t\\tuint256 _initialCreditScore,\\n\\t\\tbytes calldata _tokenURI\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Updates the credit score of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @param _newCreditScore The new credit score.\\n\\t * @param _loansCountIncrement The loans count increment.\\n\\t * @param _totalAmountBorrowedIncrement The total amount borrowed increment.\\n\\t * @param _totalAmountRepaidIncrement The total amount repaid increment.\\n\\t */\\n\\tfunction updateCreditScore(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _newCreditScore,\\n\\t\\tuint256 _loansCountIncrement,\\n\\t\\tuint256 _totalAmountBorrowedIncrement,\\n\\t\\tuint256 _totalAmountRepaidIncrement\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token to the specified address.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score of the token.\\n\\t * @param _tokenURI The token URI of the token.\\n\\t * @dev Only callable by addresses with the MINTER_ROLE.\\n\\t */\\n\\tfunction batchSafeMin(\\n\\t\\taddress[] calldata _to,\\n\\t\\tuint256[] calldata _initialCreditScore,\\n\\t\\tbytes[] calldata _tokenURI\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0a2c04d10ff7e09e45f4131cc6613f6515ed27e3089d7feadce497114043fda0\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IGhoSafeLoanAdvertisementBookSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IGhoSafeLoanAdvertisementBookSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title GhoSafeLoanAdvertisementBookSepolia Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the GhoSafeLoanAdvertisementBookSepolia contract.\\n * @dev This interface should be implemented by the GhoSafeLoanAdvertisementBookSepolia contract.\\n */\\ninterface IGhoSafeLoanAdvertisementBookSepolia {\\n\\t/**\\n\\t * @notice Struct for storing loan advertisement data.\\n\\t * @param timestampLastUpdate The timestamp of the last update.\\n\\t * @param maxLoanAmount The maximum loan amount (in Gho tokens)\\n\\t * @param maxDuration The maximum loan duration (in seconds)\\n\\t * @param interestRate The interest rate (in basis points)\\n\\t * @param safeAddress The address of the GhoSafe contract.\\n\\t * @param loanManagerAddress The address of the loan manager contract.\\n\\t * @param isAvailable The availability of the loan advertisement.\\n\\t **/\\n\\tstruct LoanAdvertisement {\\n\\t\\tuint256 timestampLastUpdate;\\n\\t\\tuint256 maxLoanAmount;\\n\\t\\tuint256 maxDuration;\\n\\t\\tuint256 interestRate;\\n\\t\\taddress safeAddress;\\n\\t\\taddress loanManagerAddress;\\n\\t\\tbool isAvailable;\\n\\t}\\n\\n\\t/// @notice Not authorized Caller error\\n\\terror UnauthorizedAccess(address caller);\\n\\n\\t/**\\n\\t * @notice Event emitted when a new loan advertisement is published.\\n\\t * @param loanId The ID of the loan advertisement.\\n\\t * @param maxLoanAmount The maximum loan amount (in Gho tokens)\\n\\t * @param maxDuration The maximum loan duration (in seconds)\\n\\t * @param interestRate The interest rate (in basis points)\\n\\t * @param safeAddress The address of the GhoSafe contract.\\n\\t * @param loanManagerAddress The address of the loan manager contract.\\n\\t **/\\n\\tevent LoanAdvertisementPublished(\\n\\t\\tuint256 indexed loanId,\\n\\t\\tuint256 maxLoanAmount,\\n\\t\\tuint256 maxDuration,\\n\\t\\tuint256 interestRate,\\n\\t\\taddress safeAddress,\\n\\t\\taddress loanManagerAddress\\n\\t);\\n\\n\\t/**\\n\\t * @notice Event emitted when a loan advertisement is updated.\\n\\t * @param loanId The ID of the loan advertisement.\\n\\t * @param maxLoanAmount The maximum loan amount (in Gho tokens)\\n\\t * @param maxDuration The maximum loan duration (in seconds)\\n\\t * @param interestRate The interest rate (in basis points)\\n\\t * @param isAvailable The availability of the loan advertisement.\\n\\t **/\\n\\tevent LoanAdvertisementUpdated(\\n\\t\\tuint256 indexed loanId,\\n\\t\\tuint256 maxLoanAmount,\\n\\t\\tuint256 maxDuration,\\n\\t\\tuint256 interestRate,\\n\\t\\tbool isAvailable\\n\\t);\\n\\n\\t/**\\n\\t * @notice Publishes a new loan advertisement.\\n\\t * @param _maxLoanAmount The maximum loan amount in Gho tokens.\\n\\t * @param _maxDuration The maximum loan duration in seconds.\\n\\t * @param _interestRate The interest rate in basis points.\\n\\t * @param _safeAddress The address of the GhoSafe contract.\\n\\t * @param _loanManagerAddress The address of the loan manager contract.\\n\\t * @return loanId The ID of the published loan advertisement.\\n\\t */\\n\\tfunction publishLoanAdvertisement(\\n\\t\\tuint256 _maxLoanAmount,\\n\\t\\tuint256 _maxDuration,\\n\\t\\tuint256 _interestRate,\\n\\t\\taddress _safeAddress,\\n\\t\\taddress _loanManagerAddress\\n\\t) external returns (uint256 loanId);\\n\\n\\t/**\\n\\t * @notice Updates the data of an existing loan advertisement.\\n\\t * @param _loanId The ID of the loan advertisement.\\n\\t * @param _maxLoanAmount The updated maximum loan amount.\\n\\t * @param _maxDuration The updated maximum loan duration.\\n\\t * @param _interestRate The updated interest rate.\\n\\t * @param _isAvailable The updated availability status.\\n\\t */\\n\\tfunction updateLoanAdvertisementData(\\n\\t\\tuint256 _loanId,\\n\\t\\tuint256 _maxLoanAmount,\\n\\t\\tuint256 _maxDuration,\\n\\t\\tuint256 _interestRate,\\n\\t\\tbool _isAvailable\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Retrieves the data of a specific loan advertisement.\\n\\t * @param _loanId The ID of the loan advertisement.\\n\\t * @return loanAdvertisementData The data of the requested loan advertisement.\\n\\t */\\n\\tfunction getLoanAdvertisementData(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (LoanAdvertisement memory loanAdvertisementData);\\n}\\n\",\"keccak256\":\"0x79f0060212e67a1a77e740774affde92a474232a06378f0e2d9f3a07323b0363\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/ILoanManagerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/ILoanManagerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IGhoSafeLoanAdvertisementBookSepolia } from \\\"../interfaces/IGhoSafeLoanAdvertisementBookSepolia.sol\\\";\\n\\n/**\\n * @title ILoanManagerSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the LoanManagerSepolia contract\\n * @dev This interface should be implemented by the LoanManagerSepolia contract.\\n */\\ninterface ILoanManagerSepolia {\\n\\t/**\\n\\t * @notice Loan struct\\n\\t * @param loanId ID of the loan.\\n\\t * @param loanRequestId ID of the loan request.\\n\\t * @param startTimestamp Timestamp when the loan was started.\\n\\t * @param duration Duration of the loan in seconds.\\n\\t * @param interestRate Interest rate for the loan in basis points (BPS).\\n\\t * @param loanAmount Amount of loan.\\n\\t * @param collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param collateralChainId Chain ID of the collateral asset.\\n\\t * @param collateralAddress Address of the collateral asset.\\n\\t * @param collateralType Type of collateral (ERC20 or ERC721).\\n\\t * @param borrower Address of the borrower.\\n\\t */\\n\\tstruct Loan {\\n\\t\\tuint256 loanId;\\n\\t\\tuint256 loanRequestId;\\n\\t\\tuint256 startTimestamp;\\n\\t\\tuint256 duration;\\n\\t\\tuint256 interestRate;\\n\\t\\tuint256 loanAmount;\\n\\t\\tuint256 collateralAmountOrId;\\n\\t\\tuint64 collateralChainId;\\n\\t\\taddress collateralAddress;\\n\\t\\tbool collateralType;\\n\\t\\taddress borrower;\\n\\t\\tbool isActive;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Emitted when loan parameters are updated.\\n\\t * @param maxLoanDuration The maximum duration of a loan in seconds.\\n\\t * @param availableBorrowPowerPercent Percentage of total borrow power that is available for borrowing.\\n\\t * @param maxLoanAmountPercentPerBorrower Maximum loan amount per borrower as a percentage of available borrow power.\\n\\t */\\n\\tevent LoanParametersUpdated(\\n\\t\\tuint256 maxLoanDuration,\\n\\t\\tuint256 availableBorrowPowerPercent,\\n\\t\\tuint256 maxLoanAmountPercentPerBorrower\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan advertisement is published.\\n\\t * @param loanAdvertisementId ID of the loan advertisement.\\n\\t * @param maxLoanDuration The maximum duration of a loan in seconds.\\n\\t * @param maxLoanAmount Maximum loan amount.\\n\\t * @param interestRate Interest rate for the loan in basis points (BPS).\\n\\t */\\n\\tevent LoanAdvertisementPublished(\\n\\t\\tuint256 loanAdvertisementId,\\n\\t\\tuint256 maxLoanDuration,\\n\\t\\tuint256 maxLoanAmount,\\n\\t\\tuint256 interestRate\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan advertisement is updated.\\n\\t * @param loanAdvertisementId ID of the loan advertisement.\\n\\t * @param isAvailable Whether the loan advertisement is available.\\n\\t * @param maxLoanDuration The maximum duration of a loan in seconds.\\n\\t * @param maxLoanAmount Maximum loan amount.\\n\\t * @param interestRate Interest rate for the loan in basis points (BPS).\\n\\t */\\n\\tevent LoanAdvertisementUpdated(\\n\\t\\tuint256 loanAdvertisementId,\\n\\t\\tbool isAvailable,\\n\\t\\tuint256 maxLoanDuration,\\n\\t\\tuint256 maxLoanAmount,\\n\\t\\tuint256 interestRate\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan request is authorized.\\n\\t * @param loanRequestId ID of the loan request.\\n\\t * @param loanId ID of the loan.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param duration Duration of the loan in seconds.\\n\\t * @param interestRate Interest rate for the loan in basis points (BPS).\\n\\t * @param loanAmount Amount of loan.\\n\\t * @param collateralChainId Chain ID of the collateral asset.\\n\\t * @param collateralAddress Address of the collateral asset.\\n\\t * @param collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param collateralType Type of collateral (ERC20 or ERC721).\\n\\t */\\n\\tevent LoanRequestAuthorized(\\n\\t\\tuint256 indexed loanRequestId,\\n\\t\\tuint256 indexed loanId,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 duration,\\n\\t\\tuint256 interestRate,\\n\\t\\tuint256 loanAmount,\\n\\t\\tuint64 collateralChainId,\\n\\t\\taddress collateralAddress,\\n\\t\\tuint256 collateralAmountOrId,\\n\\t\\tbool collateralType\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan is borrowed.\\n\\t * @param loanId ID of the loan.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param duration Duration of the loan in seconds.\\n\\t * @param interestRate Interest rate for the loan in basis points (BPS).\\n\\t * @param loanAmount Amount of loan.\\n\\t * @param collateralChainId Chain ID of the collateral asset.\\n\\t * @param collateralAddress Address of the collateral asset.\\n\\t * @param collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param collateralType Type of collateral (ERC20 or ERC721).\\n\\t */\\n\\tevent LoanBorrowed(\\n\\t\\tuint256 indexed loanId,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 duration,\\n\\t\\tuint256 interestRate,\\n\\t\\tuint256 loanAmount,\\n\\t\\tuint64 collateralChainId,\\n\\t\\taddress collateralAddress,\\n\\t\\tuint256 collateralAmountOrId,\\n\\t\\tbool collateralType\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan is repaid.\\n\\t * @param loanId ID of the loan.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param loanAmount Amount of loan.\\n\\t * @param interestAmount Amount of interest.\\n\\t */\\n\\tevent LoanRepaid(\\n\\t\\tuint256 indexed loanId,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 loanAmount,\\n\\t\\tuint256 interestAmount\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan is liquidated.\\n\\t * @param loanId ID of the loan.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param liquidator Address of the liquidator.\\n\\t * @param loanAmount Amount of loan.\\n\\t * @param interestAmount Amount of interest.\\n\\t */\\n\\tevent LoanLiquidated(\\n\\t\\tuint256 indexed loanId,\\n\\t\\taddress indexed borrower,\\n\\t\\taddress indexed liquidator,\\n\\t\\tuint256 loanAmount,\\n\\t\\tuint256 interestAmount\\n\\t);\\n\\n\\tevent CrosschainLoanBorrowedInit(\\n\\t\\tuint256 indexed loanId,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 duration,\\n\\t\\tuint256 interestRate,\\n\\t\\tuint256 loanAmount,\\n\\t\\tuint64 collateralChainId,\\n\\t\\taddress collateralAddress,\\n\\t\\tuint256 collateralAmountOrId,\\n\\t\\tbool collateralType\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan is started.\\n\\t * @param loanId ID of the loan.\\n\\t * @param startTimestamp Timestamp when the loan was started.\\n\\t */\\n\\tevent LoanStarted(uint256 indexed loanId, uint256 startTimestamp);\\n\\n\\t/// @notice Emitted when a loan advertisement is published.\\n\\terror UnauthorizedAccess(address caller);\\n\\n\\t/// @notice Loan already borrowed error.\\n\\terror LoanAlreadyBorrowed(uint256 loanId);\\n\\n\\t/// @notice Loan not active error.\\n\\terror LoanNotActive(uint256 loanId);\\n\\n\\t/// @notice Wrong Borrower error.\\n\\terror WrongBorrower(address caller, address borrower);\\n\\n\\t/// @notice Loan Still Active error.\\n\\terror LoanStillActive(uint256 loanId);\\n\\n\\t/// @notice Only owner can call error.\\n\\terror OnlyOwnerCanCall(address sender);\\n\\n\\t/// @notice Collateral Not Deposited error.\\n\\terror CollateralNotDeposited(uint256 loanId);\\n\\n\\t/**\\n\\t * @notice Sets the loan parameters.\\n\\t * @param _maxLoanDuration The maximum duration of a loan in seconds.\\n\\t * @param _availableBorrowPowerPercent Percentage of total borrow power that is available for borrowing.\\n\\t * @param _maxLoanAmountPercentPerBorrower Maximum loan amount per borrower as a percentage of available borrow power.\\n\\t * @param _interestRate Interest rate for loans in basis points (BPS)\\n\\t */\\n\\tfunction setLoanParameters(\\n\\t\\tuint256 _maxLoanDuration,\\n\\t\\tuint256 _availableBorrowPowerPercent,\\n\\t\\tuint256 _maxLoanAmountPercentPerBorrower,\\n\\t\\tuint256 _interestRate\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Returns the available borrow power.\\n\\t * @return availableBorrowPower The available borrow power.\\n\\t */\\n\\tfunction getAvailableBorrowPower()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 availableBorrowPower);\\n\\n\\t/**\\n\\t * @notice Returns the maximum loan amount per borrower.\\n\\t * @return maxLoanAmountPerBorrower The maximum loan amount per borrower (in GHO tokens)\\n\\t */\\n\\tfunction getMaxLoanAmountPerBorrower()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 maxLoanAmountPerBorrower);\\n\\n\\t/**\\n\\t * @notice Returns the number of loan advertisements.\\n\\t * @return loanAdvertisementsCount The number of loan advertisements.\\n\\t */\\n\\tfunction getLoanAdvertisementsCount() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement ID at the specified index.\\n\\t * @param index The index of the loan advertisement ID.\\n\\t * @return loanAdvertisementId The loan advertisement ID.\\n\\t */\\n\\tfunction getLoanAdvertisementId(\\n\\t\\tuint256 index\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement IDs.\\n\\t * @return loanIds The loan advertisement IDs.\\n\\t */\\n\\tfunction getLoanAdvertisementIds() external view returns (uint256[] memory);\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement data.\\n\\t * @param _loanId The loan advertisement ID.\\n\\t * @return loanAdvertisementData The loan advertisement data.\\n\\t */\\n\\tfunction getLoanAdvertisementData(\\n\\t\\tuint256 _loanId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tIGhoSafeLoanAdvertisementBookSepolia.LoanAdvertisement\\n\\t\\t\\t\\tmemory loanAdvertisementData\\n\\t\\t);\\n\\n\\t/**\\n\\t * @notice Returns the loan data.\\n\\t * @param _loanId The loan ID.\\n\\t * @return loan The loan data.\\n\\t */\\n\\tfunction getLoanData(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (Loan memory loan);\\n\\n\\t/**\\n\\t * @notice Publishes a loan advertisement.\\n\\t */\\n\\tfunction publishLoanAdvertisement() external;\\n\\n\\t/**\\n\\t * @notice Updates the loan advertisement data.\\n\\t * @param _loanId The loan advertisement ID.\\n\\t * @param _isAvailable Whether the loan advertisement is available.\\n\\t */\\n\\tfunction updateLoanAdvertisementData(\\n\\t\\tuint256 _loanId,\\n\\t\\tbool _isAvailable\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Returns whether a loan request is already authorized.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t * @return isAlreadyAuthorized Whether the loan request is already authorized.\\n\\t */\\n\\tfunction isRequestAlreadyAuthorized(\\n\\t\\tuint256 _loanRequestId\\n\\t) external view returns (bool isAlreadyAuthorized);\\n\\n\\t/**\\n\\t * @notice Authorizes a loan request.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t */\\n\\tfunction authorizeLoan(uint256 _loanRequestId) external;\\n\\n\\t/**\\n\\t * @notice Starts a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction borrow(uint256 _loanId) external;\\n}\\n\",\"keccak256\":\"0x6eb4014ef837476f31ddc2b7ce155d18e52146fb6083341584cbbe20e0b82ae0\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/ILoanSafeSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/ILoanSafeSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title ILoanSafeSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the LoanSafeSepolia contract\\n * @dev This interface should be implemented by the LoanSafeSepolia contract.\\n */\\ninterface ILoanSafeSepolia {\\n\\t/// @notice Unauthorized access error.\\n\\terror UnauthorizedAccess(address caller);\\n\\n\\t/**\\n\\t * @notice Emitted when a loan is started.\\n\\t * @param loanId ID of the loan.\\n\\t * @param startTimestamp Timestamp when the loan was started.\\n\\t */\\n\\tevent LoanStarted(uint256 indexed loanId, uint256 startTimestamp);\\n\\n\\t/**\\n\\t * @notice Checks if the collateral of a loan is owned by the contract.\\n\\t * @param _loanId ID of the loan.\\n\\t * @return isValid True if the collateral is owned by the contract.\\n\\t */\\n\\tfunction checkLoanCollateral(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (bool isValid);\\n\\n\\t/**\\n\\t * @notice Sends back the collateral of a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction sendBackCollateral(uint256 _loanId) external;\\n\\n\\t/**\\n\\t * @notice Seizes the collateral of a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t * @param _receiver Address of the receiver.\\n\\t */\\n\\tfunction seizeCollateral(uint256 _loanId, address _receiver) external;\\n\\n\\t/**\\n\\t * @dev The contract should be able to receive ERC721 tokens.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external pure returns (bytes4);\\n}\\n\",\"keccak256\":\"0x1806cc404961a7c8d32c26079e7aa311e89e84ec8a87a743af73455e40bea39a\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IMailboxSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IMailboxSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IMailboxSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the MailboxSepolia contract\\n * @dev This interface should be implemented by the MailboxSepolia contract.\\n */\\ninterface IMailboxSepolia {\\n\\t/**\\n\\t * @notice Loan request struct\\n\\t * @param amountToBorrow Amount of loan to borrow in GHO tokens.\\n     * @param loanDuration Duration of the loan in seconds.\\n\\t * @param collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param collateralAddress Address of the collateral asset.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param collateralChainId Chain ID of the collateral asset.\\n\\t * @param collateralType Type of the collateral asset: 0 for ERC20, 1 for ERC721.\\n\\t */\\n\\tstruct LoanRequest {\\n\\t\\tuint256 amountToBorrow;\\n        uint256 loanDuration;\\n\\t\\tuint256 collateralAmountOrId;\\n\\t\\taddress collateralAddress;\\n\\t\\taddress borrower;\\n\\t\\tuint64 collateralChainId;\\n\\t\\tbool collateralType;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Emitted when a loan request is created.\\n\\t * @param loanRequestId ID of the loan request.\\n\\t * @param borrower Address of the borrower.\\n\\t * @param collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param collateralAddress Address of the collateral asset.\\n\\t * @param collateralType Type of the collateral asset: 0 for ERC20, 1 for ERC721.\\n\\t * @param collateralChainId Chain ID of the collateral asset.\\n\\t * @param amountToBorrow Amount of loan to borrow in GHO tokens.\\n     * @param loanDuration Duration of the loan in seconds.\\n\\t */\\n\\tevent LoanRequestCreated(\\n\\t\\tuint256 indexed loanRequestId,\\n\\t\\taddress indexed borrower,\\n\\t\\tuint256 collateralAmountOrId,\\n\\t\\taddress collateralAddress,\\n\\t\\tuint64 collateralChainId,\\n\\t\\tbool collateralType,\\n\\t\\tuint256 amountToBorrow,\\n        uint256 loanDuration\\n\\t);\\n    \\n    /// @notice No GhoSafeID Found error\\n    error NoGhoSafeIDFound(address caller);\\n\\n\\t/**\\n\\t * @notice Creates a loan request.\\n\\t * @param _collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param _collateralAddress Address of the collateral asset.\\n\\t * @param _collateralType Type of the collateral asset: 0 for ERC20, 1 for ERC721.\\n\\t * @param _collateralChainId Chain ID of the collateral asset.\\n\\t * @param _amountToBorrow Amount of loan to borrow in GHO tokens.\\n     * @param _loanDuration Duration of the loan in seconds.\\n\\t * @return loanRequestId ID of the loan request.\\n\\t */\\n\\tfunction loanRequest(\\n\\t\\tuint256 _collateralAmountOrId,\\n\\t\\taddress _collateralAddress,\\n\\t\\tbool _collateralType,\\n\\t\\tuint64 _collateralChainId,\\n\\t\\tuint256 _amountToBorrow,\\n        uint256 _loanDuration\\n\\t) external returns (uint256 loanRequestId);\\n\\n\\t/**\\n\\t * @notice Returns the loan request.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t * @return loanRequest Loan request struct.\\n\\t */\\n\\tfunction getLoanRequest(\\n\\t\\tuint256 _loanRequestId\\n\\t) external view returns (LoanRequest memory loanRequest);\\n}\\n\",\"keccak256\":\"0xd91c8d27b80f813bcea546d61976cf3dd9d2b49688099ce93fa06622b66f7302\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IMessengerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IMessengerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IMessengerSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the MessengerSepolia contract\\n * @dev This interface should be implemented by the MessengerSepolia contract.\\n */\\ninterface IMessengerSepolia {\\n\\t/**\\n\\t * @notice Struct for loan data\\n\\t * @param messageId Message ID\\n\\t * @param loanId ID of the loan\\n\\t * @param collateralIdOrAmount Collateral ID or amount\\n\\t * @param collateralChainId Collateral chain ID\\n\\t * @param action Action\\n\\t * @param collateralType Collateral type\\n\\t * @param collateralAddress Collateral address\\n\\t * @param borrower Borrower address\\n\\t */\\n\\tstruct LoanData {\\n\\t\\tbytes32 lastReceivedMessageId;\\n\\t\\tbytes32 lastSentMessageId;\\n\\t\\tuint8 lastAction;\\n\\t\\tbool isSuccessful;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Struct for request\\n\\t * @param loanId ID of the loan\\n\\t * @param collateralIdOrAmount Collateral ID or amount\\n\\t * @param action Action\\n\\t * @param collateralType Collateral type\\n\\t * @param collateralAddress Collateral address\\n\\t * @param borrower Borrower address\\n\\t */\\n\\tstruct Request {\\n\\t\\tuint256 loanId;\\n\\t\\tuint256 collateralIdOrAmount;\\n\\t\\tuint8 action;\\n\\t\\tbool collateralType;\\n\\t\\taddress collateralAddress;\\n\\t\\taddress borrower;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Struct for response\\n\\t * @param loanId ID of the loan\\n\\t * @param action Action\\n\\t * @param isSuccessful True if the response is successful\\n\\t */\\n\\tstruct Response {\\n\\t\\tuint256 loanId;\\n\\t\\tuint8 action;\\n\\t\\tbool isSuccessful;\\n\\t}\\n\\n\\t/// @notice Not enough balance error.\\n\\terror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\n\\t/// @notice Nothing to withdraw error.\\n\\terror NothingToWithdraw();\\n\\n\\t/// @notice Destination chain not allowlisted error.\\n\\terror DestinationChainNotAllowlisted(uint64 destinationChainSelector);\\n\\n\\t/// @notice Source chain not allowlisted error.\\n\\terror SourceChainNotAllowlisted(uint64 sourceChainSelector);\\n\\n\\t/// @notice Sender not allowlisted error.\\n\\terror SenderNotAllowlisted(address sender);\\n\\n\\t/// @notice Only owner can call error.\\n\\terror OnlyOwnerCanCall(address sender);\\n\\n\\t/// @notice Only loan manager can call error.\\n\\terror OnlyLoanManagerCanCall(address sender);\\n\\n\\t/**\\n\\t * @notice Emitted when a Deposit Request is sent.\\n\\t * @param messageId ID of the message.\\n\\t * @param loanId ID of the loan.\\n\\t * @param collateralIdOrAmount Collateral ID or amount.\\n\\t * @param collateralChainId Collateral chain ID.\\n\\t * @param action Action.\\n\\t * @param collateralType Collateral type.\\n\\t * @param collateralAddress Collateral address.\\n\\t * @param borrower Borrower address.\\n\\t */\\n\\tevent RequestSent(\\n\\t\\tbytes32 indexed messageId,\\n\\t\\tuint256 indexed loanId,\\n\\t\\tuint256 collateralIdOrAmount,\\n\\t\\tuint64 collateralChainId,\\n\\t\\tuint8 action,\\n\\t\\tbool collateralType,\\n\\t\\taddress collateralAddress,\\n\\t\\taddress borrower\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when a Message is received.\\n\\t * @param messageId ID of the message.\\n\\t * @param sourceChainSelector Source chain ID.\\n\\t * @param sender Sender address.\\n\\t * @param loanId ID of the loan.\\n\\t * @param action Action.\\n\\t * @param isSuccessful True if the response is successful.\\n\\t */\\n\\tevent MessageReceived(\\n\\t\\tbytes32 indexed messageId, // The unique ID of the CCIP message.\\n\\t\\tuint64 indexed sourceChainSelector, // The chain selector of the source chain.\\n\\t\\taddress sender, // The address of the sender from the source chain.\\n\\t\\tuint256 loanId,\\n\\t\\tuint16 action,\\n\\t\\tbool isSuccessful\\n\\t);\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a destination chain for transactions.\\n\\t * @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistDestinationChain(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\tbool _allowed\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Returns the loan data for a given loan ID.\\n\\t * @param _loanId ID of the loan.\\n\\t * @return LoanData Loan data.\\n\\t */\\n\\tfunction getLoanData(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (LoanData memory);\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a source chain for transactions.\\n\\t * @param _sourceChainSelector The identifier (aka selector) for the source blockchain.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistSourceChain(\\n\\t\\tuint64 _sourceChainSelector,\\n\\t\\tbool _allowed\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a sender for transactions.\\n\\t * @param _sender The address of the sender.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistSender(address _sender, bool _allowed) external;\\n\\n\\t/**\\n\\t * @notice Send a request to another chain.\\n\\t * @dev The contract should have sufficient LINK.\\n\\t * @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t * @param _receiver The address of the recipient on the destination blockchain.\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\taddress _receiver,\\n\\t\\tRequest calldata _collateralDepositRequest\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf8143ce17bc9e40d909403f1380ed15ffa3e851cfc1b93ac7d687b2352e528e6\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/ISafeSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/ISafeSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title ISafeSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the SafeSepolia contract\\n * @dev This interface should be implemented by the SafeSepolia contract.\\n */\\ninterface ISafeSepolia {\\n\\t/// @notice ETH transfer failed error\\n\\terror ETHTtransferFailed(bytes data);\\n\\t/// @notice Not enough balance error\\n\\terror NotEnoughBalance(address token, uint256 amount, uint256 balance);\\n\\t/// @notice Unauthorized access error\\n\\terror UnauthorizedAccess(address caller);\\n\\n\\t/**\\n\\t * @notice Event emitted when a new owner is added\\n\\t * @param owner Address of the new owner\\n\\t */\\n\\tevent OwnerAdded(address indexed owner);\\n\\n\\t/**\\n\\t * @notice Event emitted when an owner is removed\\n\\t * @param owner Address of the removed owner\\n\\t */\\n\\tevent OwnerRemoved(address indexed owner);\\n\\n\\t/**\\n\\t * @notice Event emitted when ETH is withdrawn from the safe\\n\\t * @param amount Amount of ETH withdrawn\\n\\t * @param to Address that received the ETH\\n\\t */\\n\\tevent ETHWithdrawnFromSafe(uint256 amount, address indexed to);\\n\\n\\t/**\\n\\t * @notice Event emitted when a ERC20 is withdrawn from the safe\\n\\t * @param token Address of the token withdrawn\\n\\t * @param amount Amount of the token withdrawn\\n\\t * @param to Address that received the token\\n\\t */\\n\\tevent ERC20WithdrawnFromSafe(\\n\\t\\taddress indexed token,\\n\\t\\tuint256 amount,\\n\\t\\taddress indexed to\\n\\t);\\n\\n\\t/**\\n\\t * @notice Event emitted when a ERC20 is supplied to Aave\\n\\t * @param token Address of the token supplied\\n\\t * @param amount Amount of the token supplied\\n\\t */\\n\\tevent TokenSuppliedToAave(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Event emitted when a ERC20 is withdrawn from Aave\\n\\t * @param token Address of the token withdrawn\\n\\t * @param amount Amount of the token withdrawn\\n\\t */\\n\\tevent TokenWithdrawnFromAave(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Event emitted when a ERC20 is borrowed from Aave\\n\\t * @param token Address of the token borrowed\\n\\t * @param amount Amount of the token borrowed\\n\\t */\\n\\tevent TokenBorrowedFromAave(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Event emitted when a ERC20 is repaid to Aave\\n\\t * @param token Address of the token repaid\\n\\t * @param amount Amount of the token repaid\\n\\t */\\n\\tevent TokenRepaidToAave(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Event emitted ETH is received by the contract\\n\\t * @param amount Amount of ETH received\\n\\t * @param from Address that sent the ETH\\n\\t */\\n\\tevent ReceivedETH(uint256 amount, address indexed from);\\n\\n\\t/**\\n\\t * @notice Event emitted when a delegatee is approved to spend a specific amount of GHO\\n\\t * @param delegatee Address of the delegatee\\n\\t * @param amount Amount of GHO approved\\n\\t */\\n\\tevent CreditDelegateApproved(address indexed delegatee, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Returns the balances of the specified tokens\\n\\t * @param _tokens Addresses of the ERC20 tokens to check\\n\\t * @return balances Balances of the specified tokens\\n\\t */\\n\\tfunction getSafeBalances(\\n\\t\\taddress[] calldata _tokens\\n\\t) external view returns (uint256[] memory balances);\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of ETH from the contract to a specified address.\\n\\t * @param _to Address that will receive the ETH\\n\\t * @param _amount Amount of ETH to withdraw\\n\\t */\\n\\tfunction withdrawETHFromSafe(\\n\\t\\taddress payable _to,\\n\\t\\tuint256 _amount\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of an ERC20 token from the contract to a specified address.\\n\\t * @param _to Address that will receive the token\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to withdraw\\n\\t */\\n\\tfunction withdrawFromSafe(\\n\\t\\taddress payable _to,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Supplies a specific amount of an ERC20 token to Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to supply\\n\\t */\\n\\tfunction supplyToAave(address _token, uint256 _amount) external;\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of an ERC20 token from Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to withdraw\\n\\t */\\n\\tfunction withdrawFromAave(address _token, uint256 _amount) external;\\n\\n\\t/**\\n\\t * @notice Borrows a specific amount of an ERC20 token from Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to borrow\\n\\t * @param _interestRateMode Interest rate mode for the borrow\\n\\t */\\n\\tfunction borrowFromAave(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interestRateMode\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a specific amount of an ERC20 token to Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to repay\\n\\t * @param _rateMode Interest rate mode for the repay\\n\\t */\\n\\tfunction repayToAave(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _rateMode\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Borrows GHO from Aave.\\n\\t * @param _amount Amount of GHO to borrow\\n\\t */\\n\\tfunction borrowGho(uint256 _amount) external;\\n\\n\\t/**\\n\\t * @notice Repays GHO to Aave.\\n\\t * @param _amount Amount of GHO to repay\\n\\t */\\n\\tfunction repayGho(uint256 _amount) external;\\n\\n\\t/**\\n\\t * @notice Approves a delegatee to spend a specific amount of GHO.\\n\\t * @param _delegatee Address of the delegatee\\n\\t * @param _amount Amount of GHO to approve\\n\\t */\\n\\tfunction approveDelegateCreditGho(\\n\\t\\taddress _delegatee,\\n\\t\\tuint256 _amount\\n\\t) external;\\n\\n\\t/// @notice Fallback function to receive ETH with data\\n\\treceive() external payable;\\n\\n\\t/// @notice Fallback function to receive ETH without data\\n\\tfallback() external payable;\\n}\\n\",\"keccak256\":\"0x41b3e70c5b7e3556a6f37a8a3a9c975e3ae5cd54ed20b8829f643249ff041dcb\",\"license\":\"MIT\"},\"contracts/Sepolia/users/AccessManagerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/AccessManagerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { AccessControlDefaultAdminRules } from \\\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\\\";\\n\\n/**\\n * @title AccessManagerSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract for setting up access to users contracts\\n */\\ncontract AccessManagerSepolia is AccessControlDefaultAdminRules {\\n\\t/// @notice Owner role\\n\\tbytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n\\t/// @notice Unauthorized access error.\\n\\terror UnauthorizedAccess(address caller);\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _owner Owner address\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _owner\\n\\t)\\n\\t\\tAccessControlDefaultAdminRules(\\n\\t\\t\\t3 days,\\n\\t\\t\\tmsg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\\n\\t\\t)\\n\\t{\\n\\t\\t_grantRole(OWNER_ROLE, _owner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the default admin.\\n\\t */\\n\\tmodifier onlyAdmin() {\\n\\t\\tif (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n\\t\\t\\trevert UnauthorizedAccess(_msgSender());\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Grant owner role to a new address\\n\\t * @param _newOwner Address of the new owner\\n\\t */\\n\\tfunction grantOwnerRole(address _newOwner) external onlyAdmin {\\n\\t\\t_grantRole(OWNER_ROLE, _newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Revoke owner role from an address\\n\\t * @param _oldOwner Address of the old owner\\n\\t */\\n\\tfunction revokeOwnerRole(address _oldOwner) external onlyAdmin {\\n\\t\\t_revokeRole(OWNER_ROLE, _oldOwner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0be85e338cb0edeb2a2b37f875864b62badcff7a52ceda89d30633d072b469d8\",\"license\":\"MIT\"},\"contracts/Sepolia/users/LoanManagerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/LoanManagerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IAccessManagerSepolia } from \\\"../interfaces/IAccessManagerSepolia.sol\\\";\\nimport { IGhoSafeLoanAdvertisementBookSepolia } from \\\"../interfaces/IGhoSafeLoanAdvertisementBookSepolia.sol\\\";\\nimport { ILoanManagerSepolia } from \\\"../interfaces/ILoanManagerSepolia.sol\\\";\\nimport { ILoanSafeSepolia } from \\\"../interfaces/ILoanSafeSepolia.sol\\\";\\nimport { IMailboxSepolia } from \\\"../interfaces/IMailboxSepolia.sol\\\";\\nimport { ISafeSepolia } from \\\"../interfaces/ISafeSepolia.sol\\\";\\nimport { IMessengerSepolia } from \\\"../interfaces/IMessengerSepolia.sol\\\";\\nimport { LoanSafeSepolia } from \\\"./LoanSafeSepolia.sol\\\";\\nimport { MessengerSepolia } from \\\"./MessengerSepolia.sol\\\";\\n\\n/**\\n * @title LoanManagerSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract for managing loans\\n * @dev This contract should be deployed by the SafeSepolia contract.\\n */\\ncontract LoanManagerSepolia is ILoanManagerSepolia, ReentrancyGuard {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice The maximum duration of a loan in seconds.\\n\\tuint256 public maxLoanDuration;\\n\\n\\t/// @notice Percentage of total borrow power that is available for borrowing.\\n\\tuint256 public availableBorrowPowerPercent;\\n\\n\\t/// @notice Maximum loan amount per borrower as a percentage of available borrow power.\\n\\tuint256 public maxLoanAmountPercentPerBorrower;\\n\\n\\t/// @notice Interest rate for loans in basis points (BPS)\\n\\tuint256 public interestRate;\\n\\n\\t/// @notice Safe contract.\\n\\tISafeSepolia public immutable USER_SAFE;\\n\\n\\t/// @notice Access manager contract.\\n\\tIAccessManagerSepolia public immutable USER_ACCESS_MANAGER;\\n\\n\\t/// @notice Mailbox contract.\\n\\tIMailboxSepolia public immutable USER_MAILBOX;\\n\\n\\t/// @notice Loan Safe contract.\\n\\tILoanSafeSepolia public immutable USER_LOAN_SAFE;\\n\\n\\t/// @notice Messenger contract.\\n\\tIMessengerSepolia public immutable USER_MESSENGER;\\n\\n\\t/// @dev Loan advertisement book contract.\\n\\tIGhoSafeLoanAdvertisementBookSepolia\\n\\t\\tpublic immutable LOAN_ADVERTISEMENT_BOOK;\\n\\n\\t/// @dev Debt Gho token contract: https://sepolia.etherscan.io/address/0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844\\n\\tIERC20 private immutable DEBT_GHO_TOKEN;\\n\\n\\t/// @dev Gho token contract: https://sepolia.etherscan.io/address/0xc4bF5CbDaBE595361438F8c6a187bDc330539c60\\n\\tIERC20 internal immutable GHO_TOKEN;\\n\\n\\t/// @dev Set of loan advertisement IDs.\\n\\tEnumerableSet.UintSet private _loanAdvertisementIds;\\n\\n\\t/// @notice Loans mapping.\\n\\tmapping(uint256 => Loan) private loans;\\n\\n\\t/// @notice Messengers mapping (chain ID => address)\\n\\tmapping(uint64 => address) public messengers;\\n\\n\\t/// @dev Loans counter.\\n\\tuint256 private _loanCounter;\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _accessManager Address of the access manager contract.\\n\\t * @param _mailbox Address of the mailbox contract.\\n\\t * @param _loanAdvertisementBook Address of the loan advertisement book contract.\\n\\t * @param _ghoToken Address of the GHO token.\\n\\t * @param _debtGhoToken Address of the debt GHO token.\\n\\t * @param _router Address of the router contract.\\n\\t * @param _link Address of the LINK token.\\n\\t */\\n\\tconstructor(\\n\\t\\tIAccessManagerSepolia _accessManager,\\n\\t\\taddress _mailbox,\\n\\t\\taddress _loanAdvertisementBook,\\n\\t\\taddress _ghoToken,\\n\\t\\taddress _debtGhoToken,\\n\\t\\taddress _router,\\n\\t\\taddress _link\\n\\t) {\\n\\t\\tGHO_TOKEN = IERC20(_ghoToken);\\n\\t\\tDEBT_GHO_TOKEN = IERC20(_debtGhoToken);\\n\\t\\tUSER_SAFE = ISafeSepolia(payable(msg.sender));\\n\\t\\tUSER_ACCESS_MANAGER = _accessManager;\\n\\t\\tUSER_MAILBOX = IMailboxSepolia(_mailbox);\\n\\t\\tLOAN_ADVERTISEMENT_BOOK = IGhoSafeLoanAdvertisementBookSepolia(\\n\\t\\t\\t_loanAdvertisementBook\\n\\t\\t);\\n\\t\\tUSER_LOAN_SAFE = ILoanSafeSepolia(address(new LoanSafeSepolia()));\\n\\t\\tUSER_MESSENGER = IMessengerSepolia(\\n\\t\\t\\taddress(new MessengerSepolia(_router, _link, _accessManager))\\n\\t\\t);\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\tif (!USER_ACCESS_MANAGER.hasRole(keccak256(\\\"OWNER_ROLE\\\"), msg.sender)) {\\n\\t\\t\\trevert OnlyOwnerCanCall(msg.sender);\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the available borrow power.\\n\\t * @return availableBorrowPower The available borrow power.\\n\\t */\\n\\tfunction getAvailableBorrowPower()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 availableBorrowPower)\\n\\t{\\n\\t\\tuint256 totalBorrowPower = DEBT_GHO_TOKEN.balanceOf(address(USER_SAFE));\\n\\t\\tavailableBorrowPower =\\n\\t\\t\\t(totalBorrowPower * availableBorrowPowerPercent) /\\n\\t\\t\\t100;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the maximum loan amount per borrower.\\n\\t * @return maxLoanAmountPerBorrower The maximum loan amount per borrower (in GHO tokens)\\n\\t */\\n\\tfunction getMaxLoanAmountPerBorrower()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (uint256 maxLoanAmountPerBorrower)\\n\\t{\\n\\t\\tuint256 totalBorrowPower = DEBT_GHO_TOKEN.balanceOf(address(USER_SAFE));\\n\\t\\tuint256 availableBorrowPower = (totalBorrowPower *\\n\\t\\t\\tavailableBorrowPowerPercent) / 100;\\n\\t\\tmaxLoanAmountPerBorrower =\\n\\t\\t\\t(availableBorrowPower * maxLoanAmountPercentPerBorrower) /\\n\\t\\t\\t100;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the number of loan advertisements.\\n\\t * @return loanAdvertisementsCount The number of loan advertisements.\\n\\t */\\n\\tfunction getLoanAdvertisementsCount() external view returns (uint256) {\\n\\t\\treturn _loanAdvertisementIds.length();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement ID at the specified index.\\n\\t * @param index The index of the loan advertisement ID.\\n\\t * @return loanAdvertisementId The loan advertisement ID.\\n\\t */\\n\\tfunction getLoanAdvertisementId(\\n\\t\\tuint256 index\\n\\t) external view returns (uint256) {\\n\\t\\treturn _loanAdvertisementIds.at(index);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement IDs.\\n\\t * @return loanIds The loan advertisement IDs.\\n\\t */\\n\\tfunction getLoanAdvertisementIds()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\tuint256[] memory loanIds = new uint256[](\\n\\t\\t\\t_loanAdvertisementIds.length()\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < _loanAdvertisementIds.length(); i++) {\\n\\t\\t\\tloanIds[i] = _loanAdvertisementIds.at(i);\\n\\t\\t}\\n\\t\\treturn loanIds;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan advertisement data.\\n\\t * @param _loanId The loan advertisement ID.\\n\\t * @return loanAdvertisementData The loan advertisement data.\\n\\t */\\n\\tfunction getLoanAdvertisementData(\\n\\t\\tuint256 _loanId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tIGhoSafeLoanAdvertisementBookSepolia.LoanAdvertisement\\n\\t\\t\\t\\tmemory loanAdvertisementData\\n\\t\\t)\\n\\t{\\n\\t\\tloanAdvertisementData = LOAN_ADVERTISEMENT_BOOK\\n\\t\\t\\t.getLoanAdvertisementData(_loanId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan data.\\n\\t * @param _loanId The loan ID.\\n\\t * @return loan The loan data.\\n\\t */\\n\\tfunction getLoanData(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (Loan memory loan) {\\n\\t\\tloan = loans[_loanId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the total interest and the loan amount with interest.\\n\\t * @param _loanId The loan ID.\\n\\t * @return totalInterest The total interest for the loan.\\n\\t * @return loanAmountWithInterest The loan amount with interest.\\n\\t */\\n\\tfunction getTotalInterest(\\n\\t\\tuint256 _loanId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 totalInterest, uint256 loanAmountWithInterest)\\n\\t{\\n\\t\\tLoan memory loan = loans[_loanId];\\n\\t\\ttotalInterest = (loan.loanAmount * loan.interestRate) / 10000;\\n\\t\\tloanAmountWithInterest = loan.loanAmount + totalInterest;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the remaining loan time.\\n\\t * @param _loanId The loan ID.\\n\\t * @return remainingLoanTime The remaining loan time.\\n\\t */\\n\\tfunction getRemainingLoanTime(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (uint256 remainingLoanTime) {\\n\\t\\tLoan memory loan = loans[_loanId];\\n\\t\\tremainingLoanTime =\\n\\t\\t\\tloan.startTimestamp +\\n\\t\\t\\tloan.duration -\\n\\t\\t\\tblock.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the loan parameters.\\n\\t * @param _maxLoanDuration The maximum duration of a loan in seconds.\\n\\t * @param _availableBorrowPowerPercent Percentage of total borrow power that is available for borrowing.\\n\\t * @param _maxLoanAmountPercentPerBorrower Maximum loan amount per borrower as a percentage of available borrow power.\\n\\t * @param _interestRate Interest rate for loans in basis points (BPS)\\n\\t */\\n\\tfunction setLoanParameters(\\n\\t\\tuint256 _maxLoanDuration,\\n\\t\\tuint256 _availableBorrowPowerPercent,\\n\\t\\tuint256 _maxLoanAmountPercentPerBorrower,\\n\\t\\tuint256 _interestRate\\n\\t) external onlyOwner {\\n\\t\\tmaxLoanDuration = _maxLoanDuration;\\n\\t\\tavailableBorrowPowerPercent = _availableBorrowPowerPercent;\\n\\t\\tmaxLoanAmountPercentPerBorrower = _maxLoanAmountPercentPerBorrower;\\n\\t\\tinterestRate = _interestRate;\\n\\t\\temit LoanParametersUpdated(\\n\\t\\t\\t_maxLoanDuration,\\n\\t\\t\\t_availableBorrowPowerPercent,\\n\\t\\t\\t_maxLoanAmountPercentPerBorrower\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the messenger address for a chain ID.\\n\\t * @param _chainId Chain ID.\\n\\t * @param _messengerAddress Address of the messenger contract.\\n\\t */\\n\\tfunction setMessengerAddress(\\n\\t\\tuint64 _chainId,\\n\\t\\taddress _messengerAddress\\n\\t) external onlyOwner {\\n\\t\\tmessengers[_chainId] = _messengerAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Publishes a loan advertisement.\\n\\t */\\n\\tfunction publishLoanAdvertisement() external onlyOwner {\\n\\t\\tuint256 maxLoanAmountPerBorrower = getMaxLoanAmountPerBorrower();\\n\\n\\t\\tuint256 loanAdvertisementId = LOAN_ADVERTISEMENT_BOOK\\n\\t\\t\\t.publishLoanAdvertisement(\\n\\t\\t\\t\\tmaxLoanAmountPerBorrower,\\n\\t\\t\\t\\tmaxLoanDuration,\\n\\t\\t\\t\\tinterestRate,\\n\\t\\t\\t\\taddress(USER_SAFE),\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t);\\n\\n\\t\\t_loanAdvertisementIds.add(loanAdvertisementId);\\n\\n\\t\\temit LoanAdvertisementPublished(\\n\\t\\t\\tloanAdvertisementId,\\n\\t\\t\\tmaxLoanDuration,\\n\\t\\t\\tmaxLoanAmountPerBorrower,\\n\\t\\t\\tinterestRate\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the loan advertisement data.\\n\\t * @param _loanAdvertisementId The loan advertisement ID.\\n\\t * @param _isAvailable Whether the loan advertisement is available.\\n\\t */\\n\\tfunction updateLoanAdvertisementData(\\n\\t\\tuint256 _loanAdvertisementId,\\n\\t\\tbool _isAvailable\\n\\t) external onlyOwner {\\n\\t\\tuint256 maxLoanAmountPerBorrower = getMaxLoanAmountPerBorrower();\\n\\n\\t\\tLOAN_ADVERTISEMENT_BOOK.updateLoanAdvertisementData(\\n\\t\\t\\t_loanAdvertisementId,\\n\\t\\t\\tmaxLoanAmountPerBorrower,\\n\\t\\t\\tmaxLoanDuration,\\n\\t\\t\\tinterestRate,\\n\\t\\t\\t_isAvailable\\n\\t\\t);\\n\\n\\t\\temit LoanAdvertisementUpdated(\\n\\t\\t\\t_loanAdvertisementId,\\n\\t\\t\\t_isAvailable,\\n\\t\\t\\tmaxLoanDuration,\\n\\t\\t\\tmaxLoanAmountPerBorrower,\\n\\t\\t\\tinterestRate\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns whether a loan request is already authorized.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t * @return isAlreadyAuthorized Whether the loan request is already authorized.\\n\\t */\\n\\tfunction isRequestAlreadyAuthorized(\\n\\t\\tuint256 _loanRequestId\\n\\t) external view returns (bool isAlreadyAuthorized) {\\n\\t\\tfor (uint256 i = 0; i < _loanCounter; i++) {\\n\\t\\t\\tLoan storage loan = loans[i];\\n\\t\\t\\tif (loan.loanRequestId == _loanRequestId) {\\n\\t\\t\\t\\tisAlreadyAuthorized = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Authorizes a loan request.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t */\\n\\tfunction authorizeLoan(uint256 _loanRequestId) external onlyOwner {\\n\\t\\tIMailboxSepolia.LoanRequest memory loanRequest = USER_MAILBOX\\n\\t\\t\\t.getLoanRequest(_loanRequestId);\\n\\n\\t\\tuint256 loanId = _loanCounter++;\\n\\n\\t\\tloans[loanId] = Loan(\\n\\t\\t\\tloanId,\\n\\t\\t\\t_loanRequestId,\\n\\t\\t\\t0,\\n\\t\\t\\tloanRequest.loanDuration,\\n\\t\\t\\tinterestRate,\\n\\t\\t\\tloanRequest.amountToBorrow,\\n\\t\\t\\tloanRequest.collateralAmountOrId,\\n\\t\\t\\tloanRequest.collateralChainId,\\n\\t\\t\\tloanRequest.collateralAddress,\\n\\t\\t\\tloanRequest.collateralType,\\n\\t\\t\\tloanRequest.borrower,\\n\\t\\t\\tfalse\\n\\t\\t);\\n\\n\\t\\temit LoanRequestAuthorized(\\n\\t\\t\\t_loanRequestId,\\n\\t\\t\\tloanId,\\n\\t\\t\\tloanRequest.borrower,\\n\\t\\t\\tloanRequest.loanDuration,\\n\\t\\t\\tinterestRate,\\n\\t\\t\\tloanRequest.amountToBorrow,\\n\\t\\t\\tloanRequest.collateralChainId,\\n\\t\\t\\tloanRequest.collateralAddress,\\n\\t\\t\\tloanRequest.collateralAmountOrId,\\n\\t\\t\\tloanRequest.collateralType\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializes a loan with crosschain collateral. This function should be called by the borrower before calling `borrowWhithCrosschainCollateral`.\\n\\t * @notice The borrower should approve the collateral amount to be transferred by the safe contract on the collateral chain before calling this function.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction initBorrowWhithCrosschainCollateral(\\n\\t\\tuint256 _loanId\\n\\t) external nonReentrant {\\n\\t\\t// Verify that the loan is not active.\\n\\t\\tLoan memory loan = loans[_loanId];\\n\\t\\tif (loan.startTimestamp != 0) {\\n\\t\\t\\trevert LoanAlreadyBorrowed(_loanId);\\n\\t\\t}\\n\\t\\tif (loan.borrower != msg.sender) {\\n\\t\\t\\trevert WrongBorrower(msg.sender, loan.borrower);\\n\\t\\t}\\n\\n\\t\\t// Initialize the loan.\\n\\t\\tUSER_MESSENGER.sendRequest(\\n\\t\\t\\tloan.collateralChainId,\\n\\t\\t\\tmessengers[loan.collateralChainId],\\n\\t\\t\\tIMessengerSepolia.Request({\\n\\t\\t\\t\\tloanId: _loanId,\\n\\t\\t\\t\\tcollateralIdOrAmount: loan.collateralAmountOrId,\\n\\t\\t\\t\\taction: 0,\\n\\t\\t\\t\\tcollateralType: loan.collateralType,\\n\\t\\t\\t\\tcollateralAddress: loan.collateralAddress,\\n\\t\\t\\t\\tborrower: loan.borrower\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\temit CrosschainLoanBorrowedInit(\\n\\t\\t\\t_loanId,\\n\\t\\t\\tloan.borrower,\\n\\t\\t\\tloan.duration,\\n\\t\\t\\tloan.interestRate,\\n\\t\\t\\tloan.loanAmount,\\n\\t\\t\\tloan.collateralChainId,\\n\\t\\t\\tloan.collateralAddress,\\n\\t\\t\\tloan.collateralAmountOrId,\\n\\t\\t\\tloan.collateralType\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Starts a loan with crosschain collateral. This function should be called by the borrower after calling `initBorrowWhithCrosschainCollateral`.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction borrowWhithCrosschainCollateral(\\n\\t\\tuint256 _loanId\\n\\t) external nonReentrant {\\n\\t\\t// Verify that the loan is not active.\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\t\\tif (loan.startTimestamp != 0) {\\n\\t\\t\\trevert LoanAlreadyBorrowed(_loanId);\\n\\t\\t}\\n\\t\\tif (loan.borrower != msg.sender) {\\n\\t\\t\\trevert WrongBorrower(msg.sender, loan.borrower);\\n\\t\\t}\\n\\n\\t\\t// Verify if the collateral has been deposited.\\n\\t\\tIMessengerSepolia.LoanData memory loanData = USER_MESSENGER.getLoanData(\\n\\t\\t\\t_loanId\\n\\t\\t);\\n\\t\\tif (loanData.lastAction == 0 && loanData.isSuccessful == false) {\\n\\t\\t\\trevert CollateralNotDeposited(_loanId);\\n\\t\\t}\\n\\n\\t\\t// Approve loan amount to be transferred to borrower.\\n\\t\\tUSER_SAFE.approveDelegateCreditGho(loan.borrower, loan.loanAmount);\\n\\n\\t\\t// Update loan start timestamp.\\n\\t\\tloan.startTimestamp = block.timestamp;\\n\\t\\tloan.isActive = true;\\n\\n\\t\\temit LoanStarted(_loanId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays a loan with crosschain collateral.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction repayLoanCrosschainCollateral(\\n\\t\\tuint256 _loanId\\n\\t) external nonReentrant {\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\n\\t\\t// Verify that the loan is active.\\n\\t\\tif (!loan.isActive) {\\n\\t\\t\\trevert LoanNotActive(_loanId);\\n\\t\\t}\\n\\n\\t\\t// Verify that the borrower is the one repaying the loan.\\n\\t\\tif (loan.borrower != msg.sender) {\\n\\t\\t\\trevert WrongBorrower(msg.sender, loan.borrower);\\n\\t\\t}\\n\\n\\t\\t// Total interest to be paid.\\n\\t\\tuint256 totalInterest = (loan.loanAmount * loan.interestRate) / 10000;\\n\\n\\t\\t// Total amount to be repaid (loan amount + interest)\\n\\t\\tuint256 totalAmountToRepay = loan.loanAmount + totalInterest;\\n\\n\\t\\t// Transfer GHO tokens from borrower to safe.\\n\\t\\tGHO_TOKEN.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(USER_SAFE),\\n\\t\\t\\ttotalAmountToRepay\\n\\t\\t);\\n\\n\\t\\t// Transfer collateral back to borrower.\\n\\t\\tUSER_MESSENGER.sendRequest(\\n\\t\\t\\tloan.collateralChainId,\\n\\t\\t\\tmessengers[loan.collateralChainId],\\n\\t\\t\\tIMessengerSepolia.Request({\\n\\t\\t\\t\\tloanId: _loanId,\\n\\t\\t\\t\\tcollateralIdOrAmount: loan.collateralAmountOrId,\\n\\t\\t\\t\\taction: 1,\\n\\t\\t\\t\\tcollateralType: loan.collateralType,\\n\\t\\t\\t\\tcollateralAddress: loan.collateralAddress,\\n\\t\\t\\t\\tborrower: loan.borrower\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\t// Deactivate loan.\\n\\t\\tloan.isActive = false;\\n\\n\\t\\temit LoanRepaid(_loanId, msg.sender, loan.loanAmount, totalInterest);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Liquidates a loan with crosschain collateral.\\n\\t * @param _loanId ID of the loan.\\n\\t * @param _receiver Address of the receiver.\\n\\t */\\n\\tfunction liquidateLoanWhithCrosschainCollateral(\\n\\t\\tuint256 _loanId,\\n\\t\\taddress _receiver\\n\\t) external nonReentrant {\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\n\\t\\t// Verify if the duration of the loan has passed.\\n\\t\\tif (block.timestamp < loan.startTimestamp + loan.duration) {\\n\\t\\t\\trevert LoanStillActive(_loanId);\\n\\t\\t}\\n\\n\\t\\t// Deactivate loan.\\n\\t\\tloan.isActive = false;\\n\\n\\t\\t// Repay loan.\\n\\t\\tGHO_TOKEN.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(USER_SAFE),\\n\\t\\t\\tloan.loanAmount\\n\\t\\t);\\n\\n\\t\\t// Seize collateral.\\n\\t\\tUSER_MESSENGER.sendRequest(\\n\\t\\t\\tloan.collateralChainId,\\n\\t\\t\\tmessengers[loan.collateralChainId],\\n\\t\\t\\tIMessengerSepolia.Request({\\n\\t\\t\\t\\tloanId: _loanId,\\n\\t\\t\\t\\tcollateralIdOrAmount: loan.collateralAmountOrId,\\n\\t\\t\\t\\taction: 2,\\n\\t\\t\\t\\tcollateralType: loan.collateralType,\\n\\t\\t\\t\\tcollateralAddress: loan.collateralAddress,\\n\\t\\t\\t\\tborrower: _receiver // The receiver is the liquidator.\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\temit LoanLiquidated(\\n\\t\\t\\t_loanId,\\n\\t\\t\\tloan.borrower,\\n\\t\\t\\t_receiver,\\n\\t\\t\\tloan.loanAmount,\\n\\t\\t\\t(loan.loanAmount * loan.interestRate) / 10000\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Starts a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction borrow(uint256 _loanId) external nonReentrant {\\n\\t\\t// Verify that the loan is not active.\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\t\\tif (loan.startTimestamp != 0) {\\n\\t\\t\\trevert LoanAlreadyBorrowed(_loanId);\\n\\t\\t}\\n\\t\\tif (loan.borrower != msg.sender) {\\n\\t\\t\\trevert WrongBorrower(msg.sender, loan.borrower);\\n\\t\\t}\\n\\n\\t\\t// Transfer collateral to this contract.\\n\\t\\tif (loan.collateralType == false) {\\n\\t\\t\\tIERC721(loan.collateralAddress).safeTransferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\taddress(USER_LOAN_SAFE),\\n\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tIERC20(loan.collateralAddress).safeTransferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\taddress(USER_LOAN_SAFE),\\n\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Approve loan amount to be transferred to borrower.\\n\\t\\tUSER_SAFE.approveDelegateCreditGho(loan.borrower, loan.loanAmount);\\n\\n\\t\\t// Update loan start timestamp.\\n\\t\\tloan.startTimestamp = block.timestamp;\\n\\t\\tloan.isActive = true;\\n\\n\\t\\temit LoanStarted(_loanId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction repay(uint256 _loanId) external nonReentrant {\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\n\\t\\t// Verify that the loan is active.\\n\\t\\tif (!loan.isActive) {\\n\\t\\t\\trevert LoanNotActive(_loanId);\\n\\t\\t}\\n\\n\\t\\t// Total interest to be paid.\\n\\t\\tuint256 totalInterest = (loan.loanAmount * loan.interestRate) / 10000;\\n\\n\\t\\t// Total amount to be repaid (loan amount + interest)\\n\\t\\tuint256 totalAmountToRepay = loan.loanAmount + totalInterest;\\n\\n\\t\\t// Transfer GHO tokens from borrower to safe.\\n\\t\\tGHO_TOKEN.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(USER_SAFE),\\n\\t\\t\\ttotalAmountToRepay\\n\\t\\t);\\n\\n\\t\\t// Transfer collateral back to borrower.\\n\\t\\tUSER_LOAN_SAFE.sendBackCollateral(_loanId);\\n\\n\\t\\t// Deactivate loan.\\n\\t\\tloan.isActive = false;\\n\\n\\t\\temit LoanRepaid(_loanId, msg.sender, loan.loanAmount, totalInterest);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Liquidates a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t * @param _receiver Address of the receiver.\\n\\t */\\n\\tfunction liquidateLoan(\\n\\t\\tuint256 _loanId,\\n\\t\\taddress _receiver\\n\\t) external nonReentrant {\\n\\t\\tLoan storage loan = loans[_loanId];\\n\\n\\t\\t// Verify if the duration of the loan has passed.\\n\\t\\tif (block.timestamp < loan.startTimestamp + loan.duration) {\\n\\t\\t\\trevert LoanStillActive(_loanId);\\n\\t\\t}\\n\\n\\t\\t// Deactivate loan.\\n\\t\\tloan.isActive = false;\\n\\n\\t\\t// Repay loan.\\n\\t\\tGHO_TOKEN.safeTransferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(USER_SAFE),\\n\\t\\t\\tloan.loanAmount\\n\\t\\t);\\n\\n\\t\\t// Seize collateral.\\n\\t\\tUSER_LOAN_SAFE.seizeCollateral(_loanId, _receiver);\\n\\n\\t\\temit LoanLiquidated(\\n\\t\\t\\t_loanId,\\n\\t\\t\\tloan.borrower,\\n\\t\\t\\t_receiver,\\n\\t\\t\\tloan.loanAmount,\\n\\t\\t\\t(loan.loanAmount * loan.interestRate) / 10000\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a5176d04899c4a9e27d4cd108d9c75e88df0f0e74c3adec70750faa80430b61\",\"license\":\"MIT\"},\"contracts/Sepolia/users/LoanSafeSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/LoanSafeSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { ILoanManagerSepolia } from \\\"../interfaces/ILoanManagerSepolia.sol\\\";\\nimport { ISafeSepolia } from \\\"../interfaces/ISafeSepolia.sol\\\";\\nimport { ILoanSafeSepolia } from \\\"../interfaces/ILoanSafeSepolia.sol\\\";\\n\\n/**\\n * @title LoanSafeSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract for safekeeping loans\\n * @dev This contract should be deployed by the SafeSepolia contract.\\n */\\ncontract LoanSafeSepolia is ILoanSafeSepolia, IERC721Receiver {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Loan manager contract.\\n\\tILoanManagerSepolia public immutable USER_LOAN_MANAGER;\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t */\\n\\tconstructor() {\\n\\t\\tUSER_LOAN_MANAGER = ILoanManagerSepolia(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if the collateral of a loan is owned by the contract.\\n\\t * @param _loanId ID of the loan.\\n\\t * @return isValid True if the collateral is owned by the contract.\\n\\t */\\n\\tfunction checkLoanCollateral(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (bool isValid) {\\n\\t\\tILoanManagerSepolia.Loan memory loan = USER_LOAN_MANAGER.getLoanData(\\n\\t\\t\\t_loanId\\n\\t\\t);\\n\\n\\t\\tif (loan.isActive) {\\n\\t\\t\\tif (loan.collateralType == false) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tIERC721(loan.collateralAddress).ownerOf(\\n\\t\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t\\t) == address(this)\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tisValid = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tIERC20(loan.collateralAddress).balanceOf(address(this)) >=\\n\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tisValid = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sends back the collateral of a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t */\\n\\tfunction sendBackCollateral(uint256 _loanId) external {\\n\\t\\tif (msg.sender != address(USER_LOAN_MANAGER)) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\n\\t\\tILoanManagerSepolia.Loan memory loan = USER_LOAN_MANAGER.getLoanData(\\n\\t\\t\\t_loanId\\n\\t\\t);\\n\\n\\t\\tif (loan.isActive) {\\n\\t\\t\\tif (loan.collateralType == false) {\\n\\t\\t\\t\\tIERC721(loan.collateralAddress).safeTransferFrom(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tloan.borrower,\\n\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(loan.collateralAddress).safeTransfer(\\n\\t\\t\\t\\t\\tloan.borrower,\\n\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Seizes the collateral of a loan.\\n\\t * @param _loanId ID of the loan.\\n\\t * @param _receiver Address of the receiver.\\n\\t */\\n\\tfunction seizeCollateral(uint256 _loanId, address _receiver) external {\\n\\t\\tif (msg.sender != address(USER_LOAN_MANAGER)) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\n\\t\\tILoanManagerSepolia.Loan memory loan = USER_LOAN_MANAGER.getLoanData(\\n\\t\\t\\t_loanId\\n\\t\\t);\\n\\n\\t\\tif (!loan.isActive) {\\n\\t\\t\\tif (loan.collateralType == false) {\\n\\t\\t\\t\\tIERC721(loan.collateralAddress).safeTransferFrom(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t_receiver,\\n\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(loan.collateralAddress).safeTransfer(\\n\\t\\t\\t\\t\\t_receiver,\\n\\t\\t\\t\\t\\tloan.collateralAmountOrId\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev The contract should be able to receive ERC721 tokens.\\n\\t */\\n\\tfunction onERC721Received(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t)\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\toverride(ILoanSafeSepolia, IERC721Receiver)\\n\\t\\treturns (bytes4)\\n\\t{\\n\\t\\treturn this.onERC721Received.selector;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c85104ddb2b8d6632eaaa45500d762b789a73598f6ac508b4eaef8323f59d0c\",\"license\":\"MIT\"},\"contracts/Sepolia/users/MailboxSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/MailBox.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IMailboxSepolia } from \\\"../interfaces/IMailboxSepolia.sol\\\";\\nimport { IGhoSafeIDSepolia } from \\\"../interfaces/IGhoSafeIDSepolia.sol\\\";\\n\\n/**\\n * @title MailboxSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract used by delegees to create loan requests\\n * @dev This contract should be deployed by the SafeSepolia contract\\n */\\ncontract MailboxSepolia is IMailboxSepolia {\\n\\t/// @notice Loans request counter.\\n\\tuint256 public loanRequestsCounter;\\n\\n\\t/// @notice Loans request mapping.\\n\\tmapping(uint256 => LoanRequest) public loanRequests;\\n\\n\\t/// @notice GhoSafeID contract.\\n\\tIGhoSafeIDSepolia private immutable GHO_SAFE_ID;\\n\\n\\t/// @notice Safe Address\\n\\taddress public immutable SAFE_ADDRESS;\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _ghoSafeId Address of the GhoSafeID contract.\\n\\t */\\n\\tconstructor(address _ghoSafeId) {\\n\\t\\tGHO_SAFE_ID = IGhoSafeIDSepolia(_ghoSafeId);\\n\\t\\tSAFE_ADDRESS = msg.sender;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan request.\\n\\t * @param _loanRequestId ID of the loan request.\\n\\t * @return loanRequestData Loan request struct.\\n\\t */\\n\\tfunction getLoanRequest(\\n\\t\\tuint256 _loanRequestId\\n\\t) external view returns (LoanRequest memory loanRequestData) {\\n\\t\\tloanRequestData = loanRequests[_loanRequestId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates a loan request.\\n\\t * @param _collateralAmountOrId Amount or ID of the collateral asset.\\n\\t * @param _collateralAddress Address of the collateral asset.\\n\\t * @param _collateralType Type of the collateral asset: 0 for ERC20, 1 for ERC721.\\n\\t * @param _collateralChainId Chain ID of the collateral asset.\\n\\t * @param _amountToBorrow Amount of loan to borrow in GHO tokens.\\n\\t * @param _loanDuration Duration of the loan in seconds.\\n\\t * @return loanRequestId ID of the loan request.\\n\\t */\\n\\tfunction loanRequest(\\n\\t\\tuint256 _collateralAmountOrId,\\n\\t\\taddress _collateralAddress,\\n\\t\\tbool _collateralType,\\n\\t\\tuint64 _collateralChainId,\\n\\t\\tuint256 _amountToBorrow,\\n\\t\\tuint256 _loanDuration\\n\\t) external returns (uint256 loanRequestId) {\\n\\t\\tif (GHO_SAFE_ID.balanceOf(msg.sender) == 0) {\\n\\t\\t\\trevert NoGhoSafeIDFound(msg.sender);\\n\\t\\t}\\n\\t\\tloanRequestId = loanRequestsCounter++;\\n\\t\\tloanRequests[loanRequestId] = LoanRequest(\\n\\t\\t\\t_amountToBorrow,\\n\\t\\t\\t_loanDuration,\\n\\t\\t\\t_collateralAmountOrId,\\n\\t\\t\\t_collateralAddress,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_collateralChainId,\\n\\t\\t\\t_collateralType\\n\\t\\t);\\n\\t\\temit LoanRequestCreated(\\n\\t\\t\\tloanRequestId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_collateralAmountOrId,\\n\\t\\t\\t_collateralAddress,\\n\\t\\t\\t_collateralChainId,\\n\\t\\t\\t_collateralType,\\n\\t\\t\\t_amountToBorrow,\\n\\t\\t\\t_loanDuration\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc6210065620b9d99f6493b860b51057081c3e8bd20ac7b1e468cf8f5d8d044a8\",\"license\":\"MIT\"},\"contracts/Sepolia/users/MessengerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/MessengerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { CCIPReceiver } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport { IERC20 } from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IMessengerSepolia } from \\\"../interfaces/IMessengerSepolia.sol\\\";\\nimport { ILoanManagerSepolia } from \\\"../interfaces/ILoanManagerSepolia.sol\\\";\\nimport { IAccessManagerSepolia } from \\\"../interfaces/IAccessManagerSepolia.sol\\\";\\n\\n/**\\n * @title MessengerSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract for transferring messages between chains\\n * @dev This contract should be deployed by the SafeSepolia contract.\\n */\\ncontract MessengerSepolia is IMessengerSepolia, CCIPReceiver {\\n\\t/// @notice Loan manager contract.\\n\\tILoanManagerSepolia public immutable USER_LOAN_MANAGER;\\n\\n\\t/// @notice Access manager contract.\\n\\tIAccessManagerSepolia public immutable USER_ACCESS_MANAGER;\\n\\n\\t/// @notice Mapping of message IDs to messages.\\n\\tmapping(bytes32 => string) public messageIdToText;\\n\\n\\t/// @notice Mapping to keep track of allowlisted destination chains.\\n\\tmapping(uint64 => bool) public allowlistedDestinationChains;\\n\\n\\t/// @notice Mapping to keep track of allowlisted source chains.\\n\\tmapping(uint64 => bool) public allowlistedSourceChains;\\n\\n\\t/// @notice Mapping to keep track of allowlisted senders.\\n\\tmapping(address => bool) public allowlistedSenders;\\n\\n\\t/// @dev Mapping of loan IDs to loan data.\\n\\tmapping(uint256 => LoanData) private loanData;\\n\\n\\t/// @notice Link Token.\\n\\tIERC20 private LINK_TOKEN;\\n\\n\\t/**\\n\\t * @notice Constructor initializes the contract with the router address.\\n\\t * @param _router The address of the router contract.\\n\\t * @param _link The address of the link contract.\\n\\t * @param _accessManager The address of the access manager contract.\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _router,\\n\\t\\taddress _link,\\n\\t\\tIAccessManagerSepolia _accessManager\\n\\t) CCIPReceiver(_router) {\\n\\t\\tLINK_TOKEN = IERC20(_link);\\n\\t\\tUSER_LOAN_MANAGER = ILoanManagerSepolia(msg.sender);\\n\\t\\tUSER_ACCESS_MANAGER = _accessManager;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier that checks if the chain with the given destinationChainSelector is allowlisted.\\n\\t * @param _destinationChainSelector The selector of the destination chain.\\n\\t */\\n\\tmodifier onlyAllowlistedDestinationChain(uint64 _destinationChainSelector) {\\n\\t\\tif (!allowlistedDestinationChains[_destinationChainSelector])\\n\\t\\t\\trevert DestinationChainNotAllowlisted(_destinationChainSelector);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier that checks if the chain with the given sourceChainSelector is allowlisted and if the sender is allowlisted.\\n\\t * @param _sourceChainSelector The selector of the destination chain.\\n\\t * @param _sender The address of the sender.\\n\\t */\\n\\tmodifier onlyAllowlisted(uint64 _sourceChainSelector, address _sender) {\\n\\t\\tif (!allowlistedSourceChains[_sourceChainSelector])\\n\\t\\t\\trevert SourceChainNotAllowlisted(_sourceChainSelector);\\n\\t\\tif (!allowlistedSenders[_sender]) revert SenderNotAllowlisted(_sender);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Modifier that checks if the sender is the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\tif (!USER_ACCESS_MANAGER.hasRole(keccak256(\\\"OWNER_ROLE\\\"), msg.sender)) {\\n\\t\\t\\trevert OnlyOwnerCanCall(msg.sender);\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the loan data for a given loan ID.\\n\\t * @param _loanId ID of the loan.\\n\\t * @return LoanData Loan data.\\n\\t */\\n\\tfunction getLoanData(\\n\\t\\tuint256 _loanId\\n\\t) external view returns (LoanData memory) {\\n\\t\\treturn loanData[_loanId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a destination chain for transactions.\\n\\t * @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistDestinationChain(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\tbool _allowed\\n\\t) external override onlyOwner {\\n\\t\\tallowlistedDestinationChains[_destinationChainSelector] = _allowed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a source chain for transactions.\\n\\t * @param _sourceChainSelector The identifier (aka selector) for the source blockchain.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistSourceChain(\\n\\t\\tuint64 _sourceChainSelector,\\n\\t\\tbool _allowed\\n\\t) external override onlyOwner {\\n\\t\\tallowlistedSourceChains[_sourceChainSelector] = _allowed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to update the allowlist status of a sender for transactions.\\n\\t * @param _sender The address of the sender.\\n\\t * @param _allowed The new allowlist status.\\n\\t * @dev This function reverts if the sender is not the owner.\\n\\t */\\n\\tfunction allowlistSender(\\n\\t\\taddress _sender,\\n\\t\\tbool _allowed\\n\\t) external override onlyOwner {\\n\\t\\tallowlistedSenders[_sender] = _allowed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Send a collateral deposit request to another chain.\\n\\t * @dev The contract should have sufficient LINK.\\n\\t * @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n\\t * @param _receiver The address of the recipient on the destination blockchain.\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\tuint64 _destinationChainSelector,\\n\\t\\taddress _receiver,\\n\\t\\tRequest calldata _collateralDepositRequest\\n\\t) external onlyAllowlistedDestinationChain(_destinationChainSelector) {\\n\\t\\t// Only the LoanManager contract can send messages\\n\\t\\tif (msg.sender != address(USER_LOAN_MANAGER)) {\\n\\t\\t\\trevert OnlyLoanManagerCanCall(msg.sender);\\n\\t\\t}\\n\\n\\t\\t// Encode the message struct into bytes\\n\\t\\tbytes memory data = abi.encode(_collateralDepositRequest);\\n\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n\\t\\tClient.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n\\t\\t\\t_receiver,\\n\\t\\t\\tdata,\\n\\t\\t\\taddress(LINK_TOKEN)\\n\\t\\t);\\n\\n\\t\\t// Initialize a router client instance to interact with cross-chain router\\n\\t\\tIRouterClient router = IRouterClient(this.getRouter());\\n\\n\\t\\t// Get the fee required to send the CCIP message\\n\\t\\tuint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\n\\n\\t\\tif (fees > LINK_TOKEN.balanceOf(address(this)))\\n\\t\\t\\trevert NotEnoughBalance(LINK_TOKEN.balanceOf(address(this)), fees);\\n\\n\\t\\t// approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\n\\t\\tLINK_TOKEN.approve(address(router), fees);\\n\\n\\t\\t// Send the CCIP message through the router and store the returned CCIP message ID\\n\\t\\tbytes32 lastSentMessageId = router.ccipSend(\\n\\t\\t\\t_destinationChainSelector,\\n\\t\\t\\tevm2AnyMessage\\n\\t\\t);\\n\\n\\t\\t// Store data\\n\\t\\tloanData[_collateralDepositRequest.loanId]\\n\\t\\t\\t.lastSentMessageId = lastSentMessageId;\\n\\t\\tloanData[_collateralDepositRequest.loanId]\\n\\t\\t\\t.lastAction = _collateralDepositRequest.action;\\n\\n\\t\\t// Emit an event with message details\\n\\t\\temit RequestSent(\\n\\t\\t\\tlastSentMessageId,\\n\\t\\t\\t_collateralDepositRequest.loanId,\\n\\t\\t\\t_collateralDepositRequest.collateralIdOrAmount,\\n\\t\\t\\t_destinationChainSelector,\\n\\t\\t\\t_collateralDepositRequest.action,\\n\\t\\t\\t_collateralDepositRequest.collateralType,\\n\\t\\t\\t_collateralDepositRequest.collateralAddress,\\n\\t\\t\\t_collateralDepositRequest.borrower\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev This function is called by the router when a CCIP message is received.\\n\\t * @param any2EvmMessage Received message\\n\\t */\\n\\tfunction _ccipReceive(\\n\\t\\tClient.Any2EVMMessage memory any2EvmMessage\\n\\t)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tonlyAllowlisted(\\n\\t\\t\\tany2EvmMessage.sourceChainSelector,\\n\\t\\t\\tabi.decode(any2EvmMessage.sender, (address))\\n\\t\\t) // Make sure source chain and sender are allowlisted\\n\\t{\\n\\t\\t// Decode the data into a Response struct\\n\\t\\tResponse memory response = abi.decode(any2EvmMessage.data, (Response));\\n\\n\\t\\t// Store data\\n\\t\\tloanData[response.loanId].isSuccessful = response.isSuccessful;\\n\\t\\tloanData[response.loanId].lastAction = response.action;\\n\\t\\tloanData[response.loanId].lastReceivedMessageId = any2EvmMessage\\n\\t\\t\\t.messageId;\\n\\n\\t\\t// Emit an event with message details\\n\\t\\temit MessageReceived(\\n\\t\\t\\tany2EvmMessage.messageId,\\n\\t\\t\\tany2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\\n\\t\\t\\tabi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\\n\\t\\t\\tresponse.loanId,\\n\\t\\t\\tresponse.action,\\n\\t\\t\\tresponse.isSuccessful\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Constructs a CCIP message.\\n\\t * @dev This function will create an EVM2AnyMessage struct with all the necessary information for sending a text.\\n\\t * @param _receiver The address of the receiver.\\n\\t * @param _data The bytes data to be sent.\\n\\t * @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n\\t * @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n\\t */\\n\\tfunction _buildCCIPMessage(\\n\\t\\taddress _receiver,\\n\\t\\tbytes memory _data,\\n\\t\\taddress _feeTokenAddress\\n\\t) internal pure returns (Client.EVM2AnyMessage memory) {\\n\\t\\t// Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n\\t\\treturn\\n\\t\\t\\tClient.EVM2AnyMessage({\\n\\t\\t\\t\\treceiver: abi.encode(_receiver), // ABI-encoded receiver address\\n\\t\\t\\t\\tdata: _data, // Already encoded data\\n\\t\\t\\t\\ttokenAmounts: new Client.EVMTokenAmount[](0), // Empty array aas no tokens are transferred\\n\\t\\t\\t\\textraArgs: Client._argsToBytes(\\n\\t\\t\\t\\t\\t// Additional arguments, setting gas limit\\n\\t\\t\\t\\t\\tClient.EVMExtraArgsV1({ gasLimit: 200_000 })\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\t// Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n\\t\\t\\t\\tfeeToken: _feeTokenAddress\\n\\t\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\n\\t * @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\n\\t * @param _beneficiary The address to which the tokens will be sent.\\n\\t * @param _token The contract address of the ERC20 token to be withdrawn.\\n\\t */\\n\\tfunction withdrawToken(\\n\\t\\taddress _beneficiary,\\n\\t\\taddress _token\\n\\t) public onlyOwner {\\n\\t\\t// Retrieve the balance of this contract\\n\\t\\tuint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n\\t\\t// Revert if there is nothing to withdraw\\n\\t\\tif (amount == 0) revert NothingToWithdraw();\\n\\n\\t\\tIERC20(_token).transfer(_beneficiary, amount);\\n\\t}\\n}\\n \",\"keccak256\":\"0xb57e128cbb2fcad48a1ca60ff72191b30fa1ef3bf9df34f8d6e54f0aeb53c110\",\"license\":\"MIT\"},\"contracts/Sepolia/users/SafeSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/users/SafeSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { ICreditDelegationToken } from \\\"@aave/core-v3/contracts/interfaces/ICreditDelegationToken.sol\\\";\\n\\nimport { LoanManagerSepolia } from \\\"./LoanManagerSepolia.sol\\\";\\nimport { MailboxSepolia } from \\\"./MailboxSepolia.sol\\\";\\nimport { AccessManagerSepolia } from \\\"./AccessManagerSepolia.sol\\\";\\nimport { IAccessManagerSepolia } from \\\"../interfaces/IAccessManagerSepolia.sol\\\";\\nimport { ISafeSepolia } from \\\"../interfaces/ISafeSepolia.sol\\\";\\n\\n/**\\n * @title SafeSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Walet contract for managing funds and interacting with Aave\\n */\\ncontract SafeSepolia is ISafeSepolia {\\n\\t/// @dev Aave's lending pool address on Sepolia: https://sepolia.etherscan.io/address/0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951\\n\\tIPool internal immutable AAVE_POOL;\\n\\n\\t/// @dev GHO token address on Sepolia: https://sepolia.etherscan.io/address/0xc4bF5CbDaBE595361438F8c6a187bDc330539c60\\n\\tIERC20 internal immutable GHO_TOKEN;\\n\\n\\t/// @dev Credit Delegation Token for GHO on Sepolia: https://sepolia.etherscan.io/address/0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844\\n\\tICreditDelegationToken internal immutable DEBT_GHO_TOKEN;\\n\\n\\t/// @notice Access manager contract.\\n\\tIAccessManagerSepolia public immutable USER_ACCESS_MANAGER;\\n\\n\\t/// @notice Address of the LoanManager contract.\\n\\taddress public immutable USER_LOAN_MANAGER_ADDRESS;\\n\\n\\t/// @notice Address of the Mailbox contract.\\n\\taddress public immutable USER_MAILBOX_ADDRESS;\\n\\n\\t/// @notice Referral code for Aave interactions.\\n\\tuint16 public immutable REFERRAL_CODE;\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _ghoSafeIDSepolia Address of the GhoSafeIDSepolia contract\\n\\t * @param _loanAdvertisementBook Address of the LoanAdvertisementBook contract\\n\\t * @param _referralCode Referral code for Aave interactions\\n\\t * @param _ghoToken Address of the GHO token\\n\\t * @param _debtGhoToken Address of the Credit Delegation Token for GHO\\n\\t * @param _pool Address of the Aave pool\\n\\t * @param _router Address of the router contract\\n\\t * @param _link Address of the LINK token\\n\\t * @param _owner Address of the owner\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _ghoSafeIDSepolia,\\n\\t\\taddress _loanAdvertisementBook,\\n\\t\\tuint16 _referralCode,\\n\\t\\taddress _ghoToken,\\n\\t\\taddress _debtGhoToken,\\n\\t\\taddress _pool,\\n\\t\\taddress _router,\\n\\t\\taddress _link,\\n\\t\\taddress _owner\\n\\t) {\\n\\t\\tUSER_ACCESS_MANAGER = IAccessManagerSepolia(\\n\\t\\t\\taddress(new AccessManagerSepolia(_owner))\\n\\t\\t);\\n\\t\\tUSER_MAILBOX_ADDRESS = address(new MailboxSepolia(_ghoSafeIDSepolia));\\n\\t\\tUSER_LOAN_MANAGER_ADDRESS = address(\\n\\t\\t\\tnew LoanManagerSepolia(\\n\\t\\t\\t\\tUSER_ACCESS_MANAGER,\\n\\t\\t\\t\\tUSER_MAILBOX_ADDRESS,\\n\\t\\t\\t\\t_loanAdvertisementBook,\\n\\t\\t\\t\\t_ghoToken,\\n\\t\\t\\t\\t_debtGhoToken,\\n\\t\\t\\t\\t_router,\\n\\t\\t\\t\\t_link\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tREFERRAL_CODE = _referralCode;\\n\\t\\tAAVE_POOL = IPool(_pool);\\n\\t\\tGHO_TOKEN = IERC20(_ghoToken);\\n\\t\\tDEBT_GHO_TOKEN = ICreditDelegationToken(_debtGhoToken);\\n\\t}\\n\\n\\t/// @dev Throws if called by any account other than the owner.\\n\\tmodifier onlyOwner() {\\n\\t\\tif (!USER_ACCESS_MANAGER.hasRole(keccak256(\\\"OWNER_ROLE\\\"), msg.sender)) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the balances of the specified tokens\\n\\t * @param _tokens Addresses of the ERC20 tokens to check\\n\\t * @return balances Balances of the specified tokens\\n\\t */\\n\\tfunction getSafeBalances(\\n\\t\\taddress[] calldata _tokens\\n\\t) external view returns (uint256[] memory balances) {\\n\\t\\tbalances = new uint256[](_tokens.length);\\n\\t\\tfor (uint256 i = 0; i < _tokens.length; i++) {\\n\\t\\t\\tbalances[i] = IERC20(_tokens[i]).balanceOf(address(this));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds an owner to the contract.\\n\\t * @param _owner Address of the owner to add\\n\\t */\\n\\tfunction addOwner(address _owner) external onlyOwner {\\n\\t\\tUSER_ACCESS_MANAGER.grantOwnerRole(_owner);\\n\\t\\temit OwnerAdded(_owner);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes an owner from the contract.\\n\\t * @param _owner Address of the owner to remove\\n\\t */\\n\\tfunction removeOwner(address _owner) external onlyOwner {\\n\\t\\tUSER_ACCESS_MANAGER.revokeOwnerRole(_owner);\\n\\t\\temit OwnerRemoved(_owner);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of ETH from the contract to a specified address.\\n\\t * @param _to Address that will receive the ETH\\n\\t * @param _amount Amount of ETH to withdraw\\n\\t */\\n\\tfunction withdrawETHFromSafe(\\n\\t\\taddress payable _to,\\n\\t\\tuint256 _amount\\n\\t) external payable onlyOwner {\\n\\t\\t// Check if the contract has enough ETH\\n\\t\\tif (address(this).balance < _amount) {\\n\\t\\t\\trevert NotEnoughBalance(address(0), _amount, address(this).balance);\\n\\t\\t}\\n\\n\\t\\t// Transfer the ETH to the specified address\\n\\t\\t(bool sent, bytes memory data) = _to.call{ value: _amount }(\\\"\\\");\\n\\n\\t\\t// Revert if the transfer failed\\n\\t\\tif (!sent) {\\n\\t\\t\\trevert ETHTtransferFailed(data);\\n\\t\\t}\\n\\n\\t\\t// Emit event\\n\\t\\temit ETHWithdrawnFromSafe(_amount, _to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of an ERC20 token from the contract to a specified address.\\n\\t * @param _to Address that will receive the token\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to withdraw\\n\\t */\\n\\tfunction withdrawFromSafe(\\n\\t\\taddress payable _to,\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t) external onlyOwner {\\n\\t\\t// Check if the contract has enough tokens\\n\\t\\tif (IERC20(_token).balanceOf(address(this)) < _amount) {\\n\\t\\t\\trevert NotEnoughBalance(\\n\\t\\t\\t\\t_token,\\n\\t\\t\\t\\t_amount,\\n\\t\\t\\t\\tIERC20(_token).balanceOf(address(this))\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Transfer the tokens to the specified address\\n\\t\\tIERC20(_token).transfer(_to, _amount);\\n\\n\\t\\t// Emit event\\n\\t\\temit ERC20WithdrawnFromSafe(_token, _amount, _to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Supplies a specific amount of an ERC20 token to Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to supply\\n\\t */\\n\\tfunction supplyToAave(address _token, uint256 _amount) external onlyOwner {\\n\\t\\tif (IERC20(_token).balanceOf(address(this)) < _amount) {\\n\\t\\t\\trevert NotEnoughBalance(\\n\\t\\t\\t\\t_token,\\n\\t\\t\\t\\t_amount,\\n\\t\\t\\t\\tIERC20(_token).balanceOf(address(this))\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t// Approve the Aave pool to spend the token\\n\\t\\tIERC20(_token).approve(address(AAVE_POOL), _amount);\\n\\n\\t\\t// Supply the token to Aave\\n\\t\\tAAVE_POOL.supply(_token, _amount, address(this), REFERRAL_CODE);\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenSuppliedToAave(_token, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws a specific amount of an ERC20 token from Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to withdraw\\n\\t */\\n\\tfunction withdrawFromAave(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount\\n\\t) external onlyOwner {\\n\\t\\t// Withdraw the token from Aave\\n\\t\\tAAVE_POOL.withdraw(_token, _amount, address(this));\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenWithdrawnFromAave(_token, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Borrows a specific amount of an ERC20 token from Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to borrow\\n\\t * @param _interestRateMode Interest rate mode for the borrow\\n\\t */\\n\\tfunction borrowFromAave(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _interestRateMode\\n\\t) external onlyOwner {\\n\\t\\t// Borrow the token from Aave\\n\\t\\tAAVE_POOL.borrow(\\n\\t\\t\\t_token,\\n\\t\\t\\t_amount,\\n\\t\\t\\t_interestRateMode,\\n\\t\\t\\tREFERRAL_CODE,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenBorrowedFromAave(_token, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays a specific amount of an ERC20 token to Aave.\\n\\t * @param _token Address of the ERC20 token\\n\\t * @param _amount Amount of the token to repay\\n\\t * @param _rateMode Interest rate mode for the repay\\n\\t */\\n\\tfunction repayToAave(\\n\\t\\taddress _token,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _rateMode\\n\\t) external onlyOwner {\\n\\t\\t// Approve the Aave pool to spend the token\\n\\t\\tIERC20(_token).approve(address(AAVE_POOL), _amount);\\n\\n\\t\\t// Repay the token to Aave\\n\\t\\tAAVE_POOL.repay(_token, _amount, _rateMode, address(this));\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenRepaidToAave(_token, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Borrows GHO from Aave.\\n\\t * @param _amount Amount of GHO to borrow\\n\\t */\\n\\tfunction borrowGho(uint256 _amount) external onlyOwner {\\n\\t\\t// Borrow GHO from Aave\\n\\t\\tAAVE_POOL.borrow(\\n\\t\\t\\taddress(GHO_TOKEN),\\n\\t\\t\\t_amount,\\n\\t\\t\\t2,\\n\\t\\t\\tREFERRAL_CODE,\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenBorrowedFromAave(address(GHO_TOKEN), _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays GHO to Aave.\\n\\t * @param _amount Amount of GHO to repay\\n\\t */\\n\\tfunction repayGho(uint256 _amount) external onlyOwner {\\n\\t\\t// Approve the Aave pool to spend GHO\\n\\t\\tIERC20(address(GHO_TOKEN)).approve(address(AAVE_POOL), _amount);\\n\\n\\t\\t// Repay GHO to Aave\\n\\t\\tAAVE_POOL.repay(address(GHO_TOKEN), _amount, 2, address(this));\\n\\n\\t\\t// Emit event\\n\\t\\temit TokenRepaidToAave(address(GHO_TOKEN), _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approves a delegatee to spend a specific amount of GHO.\\n\\t * @param _delegatee Address of the delegatee\\n\\t * @param _amount Amount of GHO to approve\\n\\t */\\n\\tfunction approveDelegateCreditGho(\\n\\t\\taddress _delegatee,\\n\\t\\tuint256 _amount\\n\\t) external {\\n\\t\\t// Check if the caller is the LoanManager contract\\n\\t\\tif (msg.sender != USER_LOAN_MANAGER_ADDRESS) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\n\\t\\t// Approve the delegatee to spend GHO\\n\\t\\tDEBT_GHO_TOKEN.approveDelegation(_delegatee, _amount);\\n\\n\\t\\t// Emit event\\n\\t\\temit CreditDelegateApproved(_delegatee, _amount);\\n\\t}\\n\\n\\t/// @notice Fallback function to receive ETH with data\\n\\treceive() external payable {\\n\\t\\temit ReceivedETH(msg.value, msg.sender);\\n\\t}\\n\\n\\t/// @notice Fallback function to receive ETH without data\\n\\tfallback() external payable {\\n\\t\\temit ReceivedETH(msg.value, msg.sender);\\n\\t}\\n}\\n\",\"keccak256\":\"0x38f303fbd57ddedc2bc10a9ad2e88a560f0ee40b7bd0afcdd85d41ed25766c7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162008afa38038062008afa8339810160408190526200003591620001c7565b80604051620000449062000180565b6001600160a01b039091168152602001604051809103906000f08015801562000071573d6000803e3d6000fd5b506001600160a01b031660e05260405189906200008e906200018e565b6001600160a01b039091168152602001604051809103906000f080158015620000bb573d6000803e3d6000fd5b506001600160a01b0316610120816001600160a01b03168152505060e051610120518988888787604051620000f0906200019c565b6001600160a01b03978816815295871660208701529386166040860152918516606085015284166080840152831660a083015290911660c082015260e001604051809103906000f0801580156200014b573d6000803e3d6000fd5b506001600160a01b039081166101005261ffff90971661014052505050831660805290821660a0521660c052506200028a9050565b61102b806200206283390190565b6106e7806200308d83390190565b615386806200377483390190565b80516001600160a01b0381168114620001c257600080fd5b919050565b60008060008060008060008060006101208a8c031215620001e757600080fd5b620001f28a620001aa565b98506200020260208b01620001aa565b975060408a015161ffff811681146200021a57600080fd5b96506200022a60608b01620001aa565b95506200023a60808b01620001aa565b94506200024a60a08b01620001aa565b93506200025a60c08b01620001aa565b92506200026a60e08b01620001aa565b91506200027b6101008b01620001aa565b90509295985092959850929598565b60805160a05160c05160e051610100516101205161014051611cb9620003a96000396000818161019a015281816106450152818161081e015261193f015260006102d301526000818161035f0152610ab701526000818161039301528181610411015281816104c7015281816105830152818161073f0152818161093901528181610cec01528181610f7b0152818161102c015281816110e8015281816113130152818161159e015261174a01526000610b1d0152600081816107e8015281816108ac015281816113eb01528181611470015261151c0152600081816106720152818161084e015281816109f70152818161119101528181611241015281816113bc015281816114ac0152818161189301526119660152611cb96000f3fe6080604052600436106100f75760003560e01c80637065cb481161008a578063d5c8c1a011610059578063d5c8c1a01461034d578063e2fff82914610381578063e371aa22146103b5578063f964711b146103c857610134565b80637065cb48146102a157806376878ebb146102c15780638f7073be1461030d578063970a52b01461032d57610134565b8063487ede04116100c6578063487ede041461021457806352eb00a314610234578063530ada5a14610254578063638181b31461028157610134565b8063173825d9146101665780633583849a146101885780633fd8c992146101d45780634769d36b146101f457610134565b366101345760405134815233907f8896b78bee3425f51a871baaeba673d465e036b59282c65dece71c53e9078b62906020015b60405180910390a2005b60405134815233907f8896b78bee3425f51a871baaeba673d465e036b59282c65dece71c53e9078b629060200161012a565b34801561017257600080fd5b50610186610181366004611a15565b6103e8565b005b34801561019457600080fd5b506101bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff90911681526020015b60405180910390f35b3480156101e057600080fd5b506101866101ef366004611a39565b61055a565b34801561020057600080fd5b5061018661020f366004611a6e565b610716565b34801561022057600080fd5b5061018661022f366004611a87565b610910565b34801561024057600080fd5b5061018661024f366004611a87565b610aac565b34801561026057600080fd5b5061027461026f366004611ab3565b610bb4565b6040516101cb9190611b28565b34801561028d57600080fd5b5061018661029c366004611b6c565b610cc3565b3480156102ad57600080fd5b506101866102bc366004611a15565b610f52565b3480156102cd57600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cb565b34801561031957600080fd5b50610186610328366004611a39565b6110bf565b34801561033957600080fd5b50610186610348366004611a6e565b6112ea565b34801561035957600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561038d57600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b6101866103c3366004611a87565b611575565b3480156103d457600080fd5b506101866103e3366004611a87565b611721565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611bad565b6104a857604051633733be5960e21b81523360048201526024015b60405180910390fd5b604051632716f7ad60e21b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639c5bdeb490602401600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b50506040516001600160a01b03841692507f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9150600090a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190611bad565b61061557604051633733be5960e21b815233600482015260240161049f565b60405163a415bcad60e01b81526001600160a01b038481166004830152602482018490526044820183905261ffff7f00000000000000000000000000000000000000000000000000000000000000001660648301523060848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a401600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b50505050826001600160a01b03167f8b2e69af5d0f812e8aa27147468f28ff71ec055b28822bc4ca66c744ad583b318360405161070991815260200190565b60405180910390a2505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190611bad565b6107d157604051633733be5960e21b815233600482015260240161049f565b60405163a415bcad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600260448301527f000000000000000000000000000000000000000000000000000000000000000061ffff1660648301523060848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a401600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f8b2e69af5d0f812e8aa27147468f28ff71ec055b28822bc4ca66c744ad583b318260405161090591815260200190565b60405180910390a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611bad565b6109cb57604051633733be5960e21b815233600482015260240161049f565b604051631a4ca37b60e21b81526001600160a01b038381166004830152602482018390523060448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec906064016020604051808303816000875af1158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190611bcf565b50816001600160a01b03167f945c3b2ab3acdd0d9231c146b13ebe44f4f39b3cf65d6d67808118c9e436146b82604051610aa091815260200190565b60405180910390a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af757604051633733be5960e21b815233600482015260240161049f565b604051630c04a8a160e41b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c04a8a1090604401600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50505050816001600160a01b03167f800e1fdc7a7ff328f894ab006cf57c9e224d378a6ed06a97d7894a949b18d4b582604051610aa091815260200190565b60608167ffffffffffffffff811115610bcf57610bcf611be8565b604051908082528060200260200182016040528015610bf8578160200160208202803683370190505b50905060005b82811015610cbc57838382818110610c1857610c18611bfe565b9050602002016020810190610c2d9190611a15565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190611bcf565b828281518110610ca957610ca9611bfe565b6020908102919091010152600101610bfe565b5092915050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190611bad565b610d7e57604051633733be5960e21b815233600482015260240161049f565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190611bcf565b1015610e8c576040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a08231906024015b602060405180830381865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b9190611bcf565b60405162eb9b8760e61b81526001600160a01b0390931660048401526024830191909152604482015260640161049f565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190611bad565b50826001600160a01b0316826001600160a01b03167fda3b4ed9c4aa8e8357ddf75f4eca29a990b129f9f9cde598963b1f14a196ebb983604051610f4591815260200190565b60405180910390a3505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee9190611bad565b61100d57604051633733be5960e21b815233600482015260240161049f565b60405163397a8bab60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063397a8bab90602401600060405180830381600087803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b50506040516001600160a01b03841692507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c39150600090a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190611bad565b61117a57604051633733be5960e21b815233600482015260240161049f565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905284169063095ea7b3906044016020604051808303816000875af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190611bad565b5060405163573ade8160e01b81526001600160a01b03848116600483015260248201849052604482018390523060648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af115801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190611bcf565b50826001600160a01b03167ff01596bfb877bede5ef96e3d3d1d2e2823cadba79814dbc4b615fa39aed409818360405161070991815260200190565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113869190611bad565b6113a557604051633733be5960e21b815233600482015260240161049f565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190611bad565b5060405163573ade8160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600260448301523060648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af11580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190611bcf565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167ff01596bfb877bede5ef96e3d3d1d2e2823cadba79814dbc4b615fa39aed409818260405161090591815260200190565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116119190611bad565b61163057604051633733be5960e21b815233600482015260240161049f565b804710156116605760405162eb9b8760e61b8152600060048201526024810182905247604482015260640161049f565b600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146116ae576040519150601f19603f3d011682016040523d82523d6000602084013e6116b3565b606091505b5091509150816116d85780604051637b5915d360e11b815260040161049f9190611c14565b836001600160a01b03167fb121b9f323a25ff676670f214a9dd304cc044406c4a5d73ffb9f40fb051125548460405161171391815260200190565b60405180910390a250505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190611bad565b6117dc57604051633733be5960e21b815233600482015260240161049f565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190611bcf565b101561187c576040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a0823190602401610e1a565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af11580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190611bad565b5060405163617ba03760e01b81526001600160a01b0383811660048301526024820183905230604483015261ffff7f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000169063617ba03790608401600060405180830381600087803b1580156119aa57600080fd5b505af11580156119be573d6000803e3d6000fd5b50505050816001600160a01b03167f15830ad89052cd588c4c4f5bf9d998ce3337effc05c54cef8a8bc2ecc47c845982604051610aa091815260200190565b6001600160a01b0381168114611a1257600080fd5b50565b600060208284031215611a2757600080fd5b8135611a32816119fd565b9392505050565b600080600060608486031215611a4e57600080fd5b8335611a59816119fd565b95602085013595506040909401359392505050565b600060208284031215611a8057600080fd5b5035919050565b60008060408385031215611a9a57600080fd5b8235611aa5816119fd565b946020939093013593505050565b60008060208385031215611ac657600080fd5b823567ffffffffffffffff80821115611ade57600080fd5b818501915085601f830112611af257600080fd5b813581811115611b0157600080fd5b8660208260051b8501011115611b1657600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611b6057835183529284019291840191600101611b44565b50909695505050505050565b600080600060608486031215611b8157600080fd5b8335611b8c816119fd565b92506020840135611b9c816119fd565b929592945050506040919091013590565b600060208284031215611bbf57600080fd5b81518015158114611a3257600080fd5b600060208284031215611be157600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020808352835180602085015260005b81811015611c4257858101830151858201604001528201611c26565b506000604082860101526040601f19601f830116850101925050509291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220c21a1eb5b8b750d36ef4750e8279e3d92bae167c3b46f5e916646e932aa750a364736f6c6343000817003360806040523480156200001157600080fd5b506040516200102b3803806200102b8339810160408190526200003491620001ec565b6203f48033806200005f57604051636116401160e11b81526000600482015260240160405180910390fd5b600180546001600160d01b0316600160d01b65ffffffffffff8516021790556200008b600082620000c8565b505050620000c07fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e82620000c860201b60201c565b50506200021e565b60008262000129576000620000e56002546001600160a01b031690565b6001600160a01b0316146200010d57604051631fe1e13d60e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384161790555b6200013583836200013e565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16620001e3576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556200019a3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000138565b50600062000138565b600060208284031215620001ff57600080fd5b81516001600160a01b03811681146200021757600080fd5b9392505050565b610dfd806200022e6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638da5cb5b116100b8578063cc8463c81161007c578063cc8463c81461029c578063cefc1429146102a4578063cf6eefb7146102ac578063d547741f146102da578063d602b9fd146102ed578063e58378bb146102f557600080fd5b80638da5cb5b1461023f57806391d14854146102475780639c5bdeb41461025a578063a1eda53c1461026d578063a217fddf1461029457600080fd5b806336568abe116100ff57806336568abe146101ce578063397a8bab146101e1578063634e93da146101f4578063649a5ec71461020757806384ef8ffc1461021a57600080fd5b806301ffc9a71461013c578063022d63fb146101645780630aa6220b14610180578063248a9ca31461018a5780632f2ff15d146101bb575b600080fd5b61014f61014a366004610c9e565b61031c565b60405190151581526020015b60405180910390f35b620697805b60405165ffffffffffff909116815260200161015b565b610188610347565b005b6101ad610198366004610cc8565b60009081526020819052604090206001015490565b60405190815260200161015b565b6101886101c9366004610cfd565b61035d565b6101886101dc366004610cfd565b610389565b6101886101ef366004610d29565b610435565b610188610202366004610d29565b610495565b610188610215366004610d44565b6104a9565b6002546001600160a01b03165b6040516001600160a01b03909116815260200161015b565b6102276104bd565b61014f610255366004610cfd565b6104d6565b610188610268366004610d29565b6104ff565b61027561053e565b6040805165ffffffffffff93841681529290911660208301520161015b565b6101ad600081565b610169610592565b6101886105f1565b6102b4610631565b604080516001600160a01b03909316835265ffffffffffff90911660208301520161015b565b6101886102e8366004610cfd565b610652565b61018861067a565b6101ad7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b60006001600160e01b031982166318a4c3c360e11b148061034157506103418261068d565b92915050565b6000610352816106c2565b61035a6106cc565b50565b8161037b57604051631fe1e13d60e11b815260040160405180910390fd5b61038582826106d9565b5050565b811580156103a457506002546001600160a01b038281169116145b1561042b576000806103b4610631565b90925090506001600160a01b0382161515806103d6575065ffffffffffff8116155b806103e957504265ffffffffffff821610155b15610416576040516319ca5ebb60e01b815265ffffffffffff821660048201526024015b60405180910390fd5b50506001805465ffffffffffff60a01b191690555b6103858282610704565b6104406000336104d6565b61046b57335b604051633733be5960e21b81526001600160a01b03909116600482015260240161040d565b6103857fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8261073c565b60006104a0816106c2565b610385826107ab565b60006104b4816106c2565b6103858261081e565b60006104d16002546001600160a01b031690565b905090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61050a6000336104d6565b6105145733610446565b6103857fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8261088e565b600254600090600160d01b900465ffffffffffff16801515801561056a57504265ffffffffffff821610155b6105765760008061058a565b600254600160a01b900465ffffffffffff16815b915091509091565b600254600090600160d01b900465ffffffffffff1680151580156105bd57504265ffffffffffff8216105b6105d857600154600160d01b900465ffffffffffff166105eb565b600254600160a01b900465ffffffffffff165b91505090565b60006105fb610631565b509050336001600160a01b0382161461062957604051636116401160e11b815233600482015260240161040d565b61035a6108cb565b6001546001600160a01b03811691600160a01b90910465ffffffffffff1690565b8161067057604051631fe1e13d60e11b815260040160405180910390fd5b6103858282610964565b6000610685816106c2565b61035a610989565b60006001600160e01b03198216637965db0b60e01b148061034157506301ffc9a760e01b6001600160e01b0319831614610341565b61035a8133610994565b6106d76000806109cd565b565b6000828152602081905260409020600101546106f4816106c2565b6106fe838361073c565b50505050565b6001600160a01b038116331461072d5760405163334bd91960e11b815260040160405180910390fd5b610737828261088e565b505050565b60008261079a5760006107576002546001600160a01b031690565b6001600160a01b03161461077e57604051631fe1e13d60e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384161790555b6107a48383610a8d565b9392505050565b60006107b5610592565b6107be42610b1f565b6107c89190610d82565b90506107d48282610b56565b60405165ffffffffffff821681526001600160a01b038316907f3377dc44241e779dd06afab5b788a35ca5f3b778836e2990bdb26a2a4b2e5ed69060200160405180910390a25050565b600061082982610bd5565b61083242610b1f565b61083c9190610d82565b905061084882826109cd565b6040805165ffffffffffff8085168252831660208201527ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b910160405180910390a15050565b6000821580156108ab57506002546001600160a01b038381169116145b156108c157600280546001600160a01b03191690555b6107a48383610c1d565b6000806108d6610631565b915091506108eb8165ffffffffffff16151590565b15806108ff57504265ffffffffffff821610155b15610927576040516319ca5ebb60e01b815265ffffffffffff8216600482015260240161040d565b610943600061093e6002546001600160a01b031690565b61088e565b5061094f60008361073c565b5050600180546001600160d01b031916905550565b60008281526020819052604090206001015461097f816106c2565b6106fe838361088e565b6106d7600080610b56565b61099e82826104d6565b6103855760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161040d565b600254600160d01b900465ffffffffffff168015610a50574265ffffffffffff82161015610a2657600254600180546001600160d01b0316600160a01b90920465ffffffffffff16600160d01b02919091179055610a50565b6040517f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec590600090a15b50600280546001600160a01b0316600160a01b65ffffffffffff948516026001600160d01b031617600160d01b9290931691909102919091179055565b6000610a9983836104d6565b610b17576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055610acf3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610341565b506000610341565b600065ffffffffffff821115610b52576040516306dfcc6560e41b8152603060048201526024810183905260440161040d565b5090565b6000610b60610631565b6001805465ffffffffffff8616600160a01b026001600160d01b03199091166001600160a01b038816171790559150610ba290508165ffffffffffff16151590565b15610737576040517f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a960510990600090a1505050565b600080610be0610592565b90508065ffffffffffff168365ffffffffffff1611610c0857610c038382610da8565b6107a4565b6107a465ffffffffffff841662069780610c88565b6000610c2983836104d6565b15610b17576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610341565b6000818310610c9757816107a4565b5090919050565b600060208284031215610cb057600080fd5b81356001600160e01b0319811681146107a457600080fd5b600060208284031215610cda57600080fd5b5035919050565b80356001600160a01b0381168114610cf857600080fd5b919050565b60008060408385031215610d1057600080fd5b82359150610d2060208401610ce1565b90509250929050565b600060208284031215610d3b57600080fd5b6107a482610ce1565b600060208284031215610d5657600080fd5b813565ffffffffffff811681146107a457600080fd5b634e487b7160e01b600052601160045260246000fd5b65ffffffffffff818116838216019080821115610da157610da1610d6c565b5092915050565b65ffffffffffff828116828216039080821115610da157610da1610d6c56fea2646970667358221220d2b3086393a5a3ca869c087498bb05552bef58ba2e6f8f2672409cc8580026c164736f6c6343000817003360c060405234801561001057600080fd5b506040516106e73803806106e783398101604081905261002f91610044565b6001600160a01b03166080523360a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a05161064e61009960003960006101c6015260006102d2015261064e6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631b3b86711461005c5780631f5553b9146101a057806385d38f80146101c1578063a5a305ad14610200578063d1b332f414610209575b600080fd5b61012761006a36600461053c565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915250600090815260016020818152604092839020835160e08101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004909201549182166080820152600160a01b820467ffffffffffffffff1660a0820152600160e01b90910460ff16151560c082015290565b6040516101979190600060e082019050825182526020830151602083015260408301516040830152606083015160018060a01b038082166060850152806080860151166080850152505067ffffffffffffffff60a08401511660a083015260c0830151151560c083015292915050565b60405180910390f35b6101b36101ae366004610555565b6102ba565b604051908152602001610197565b6101e87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b6101b360005481565b61027061021736600461053c565b600160208190526000918252604090912080549181015460028201546003830154600490930154919290916001600160a01b0391821691811690600160a01b810467ffffffffffffffff1690600160e01b900460ff1687565b604080519788526020880196909652948601939093526001600160a01b03918216606086015216608084015267ffffffffffffffff1660a0830152151560c082015260e001610197565b6040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034591906105d8565b60000361036b57604051639289acb760e01b815233600482015260240160405180910390fd5b60008054908061037a836105f1565b9190505590506040518060e00160405280848152602001838152602001888152602001876001600160a01b03168152602001336001600160a01b031681526020018567ffffffffffffffff1681526020018615158152506001600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160040160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c082015181600401601c6101000a81548160ff021916908315150217905550905050336001600160a01b0316817f2969aea605a1559060563ed9fd9b0637c7ccdca1704a3b0f7e736dfb222843f28989888a898960405161052a969594939291909586526001600160a01b0394909416602086015267ffffffffffffffff92909216604085015215156060840152608083015260a082015260c00190565b60405180910390a39695505050505050565b60006020828403121561054e57600080fd5b5035919050565b60008060008060008060c0878903121561056e57600080fd5b8635955060208701356001600160a01b038116811461058c57600080fd5b9450604087013580151581146105a157600080fd5b9350606087013567ffffffffffffffff811681146105be57600080fd5b9598949750929560808101359460a0909101359350915050565b6000602082840312156105ea57600080fd5b5051919050565b60006001820161061157634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220dfc082375cc505bec85f5a995150e4a27735c881fecfddc2e420d30813496ee464736f6c634300081700336101806040523480156200001257600080fd5b506040516200538638038062005386833981016040819052620000359162000140565b60016000556001600160a01b0380851661016052838116610140523360805287811660a05286811660c05285166101205260405162000074906200010b565b604051809103906000f08015801562000091573d6000803e3d6000fd5b506001600160a01b031660e052604051829082908990620000b29062000119565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f080158015620000ef573d6000803e3d6000fd5b506001600160a01b03166101005250620001eb95505050505050565b610b358062002ef883390190565b6119598062003a2d83390190565b6001600160a01b03811681146200013d57600080fd5b50565b600080600080600080600060e0888a0312156200015c57600080fd5b8751620001698162000127565b60208901519097506200017c8162000127565b60408901519096506200018f8162000127565b6060890151909550620001a28162000127565b6080890151909450620001b58162000127565b60a0890151909350620001c88162000127565b60c0890151909250620001db8162000127565b8091505092959891949750929550565b60805160a05160c05160e05161010051610120516101405161016051612bd562000323600039600081816105e801528181610867015281816112500152611f02015260008181610d0201526122d901526000818161025901528181610b6a01528181610edb0152611359015260008181610452015281816106af01528181611c9101528181611fca01526121af01526000818161042b015281816108c5015281816112c001528181611a450152611ae101526000818161038301526115da01526000818161052401528181610a9001528181610dd7015281816114190152818161152f01526118bb0152600081816104bb0152818161060d0152818161088a01528181610cd501528181610ea70152818161127501528181611b3701528181611d7101528181611f2501526122ac0152612bd56000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80637f6634a71161011a578063b400bfb7116100ad578063c98a76d61161007c578063c98a76d61461050c578063e2fff8291461051f578063f48a967a14610546578063f4d1e13f14610559578063f64b3fc01461056c57600080fd5b8063b400bfb7146104b6578063b7b0d311146104dd578063bac079b4146104f0578063c5ebeaec146104f957600080fd5b8063a4be77ee116100e9578063a4be77ee14610474578063a52dd2191461047d578063a62e8a9f14610490578063b031db86146104a357600080fd5b80637f6634a7146103a5578063807d0afb1461041e57806394ab121f146104265780639e76c96d1461044d57600080fd5b80634c5bf4291161019257806370a4e1bf1161016157806370a4e1bf1461033957806379b2e89f146103625780637c3a00fd146103755780637ef7b2e71461037e57600080fd5b80634c5bf429146102e157806351a22443146102e9578063622fe39f146102f157806364337f411461031157600080fd5b8063371fd8e6116101ce578063371fd8e6146102935780633b089a44146102a6578063439e3f46146102b957806347eb6f49146102cc57600080fd5b80630201cbc7146102005780630df40eae14610215578063253eba541461023157806330c2ed7e14610254575b600080fd5b61021361020e36600461260f565b610574565b005b61021e60025481565b6040519081526020015b60405180910390f35b61024461023f36600461263f565b61079b565b6040519015158152602001610228565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610228565b6102136102a136600461263f565b6107dc565b61021e6102b436600461263f565b61098b565b6102136102c7366004612666565b610a67565b6102d4610c29565b604051610228919061268b565b61021e610cbe565b610213610dae565b6103046102ff36600461263f565b610fa6565b60405161022891906126cf565b61032461031f36600461263f565b6110ec565b60408051928352602083019190915201610228565b61027b610347366004612790565b6008602052600090815260409020546001600160a01b031681565b61021361037036600461260f565b6111e1565b61021e60045481565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b6103b86103b336600461263f565b6112ef565b6040516102289190600060e08201905082518252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a0850152505060c0830151151560c083015292915050565b61021e6113d2565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b61021e60015481565b61021e61048b36600461263f565b6113e3565b61021361049e3660046127ad565b6113f0565b6102136104b136600461263f565b611506565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b6102136104eb3660046127df565b611892565b61021e60035481565b61021361050736600461263f565b611986565b61021361051a36600461263f565b611bf8565b61027b7f000000000000000000000000000000000000000000000000000000000000000081565b61021361055436600461263f565b611e33565b61021361056736600461263f565b612005565b61021e612295565b61057c612366565b60008281526007602052604090206003810154600282015461059e9190612823565b4210156105c657604051636bcd5a6360e11b8152600481018490526024015b60405180910390fd5b60088101805460ff60a01b191690556005810154610632906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907f000000000000000000000000000000000000000000000000000000000000000090612390565b60078101546001600160401b03811660008181526008602090815260409182902054825160c08101845288815260068701549281019290925260028284015260ff600160e01b860416151560608301526001600160a01b03600160401b9095048516608083015286851660a08301529151635dde677b60e11b81527f000000000000000000000000000000000000000000000000000000000000000085169463bbbccef6946106e8949093911691600401612836565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b505050506008810154600582015460048301546001600160a01b0385811693169186917f9950a0562c02382e2e840daa73082d5be7660ce37601f28fa4c84089c11e8a0691906127109061076a90836128a5565b61077491906128bc565b6040805192835260208301919091520160405180910390a4506107976001600055565b5050565b6000805b6009548110156107d657600081815260076020526040902060018101548490036107cd5760019250506107d6565b5060010161079f565b50919050565b6107e4612366565b60008181526007602052604090206008810154600160a01b900460ff1661082157604051638db4d94d60e01b8152600481018390526024016105bd565b60006127108260040154836005015461083a91906128a5565b61084491906128bc565b905060008183600501546108589190612823565b90506108af6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000084612390565b604051631e7046db60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e7046db906024015b600060405180830381600087803b15801561091257600080fd5b505af1158015610926573d6000803e3d6000fd5b5050505060088301805460ff60a01b1916905560058301546040805191825260208201849052339186917f553c9087bff5b534e499a66dac3fa9db2962cd252ea01165239755836ae5345e910160405180910390a35050506109886001600055565b50565b600081815260076020818152604080842081516101808101835281548152600182015493810193909352600281015491830182905260038101546060840181905260048201546080850152600582015460a0850152600682015460c0850152938101546001600160401b03811660e08501526001600160a01b03600160401b8204811661010086015260ff600160e01b90920482161515610120860152600890920154918216610140850152600160a01b90910416151561016083015290914291610a569190612823565b610a6091906128de565b9392505050565b604051632474521560e21b8152600080516020612b8083398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0391906128f1565b610b2257604051630d175fff60e31b81523360048201526024016105bd565b6000610b2c610cbe565b60015460048054604051635204ee1d60e11b8152918201879052602482018490526044820192909252606481019190915283151560848201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a409dc3a9060a401600060405180830381600087803b158015610bb657600080fd5b505af1158015610bca573d6000803e3d6000fd5b5050600154600454604080518881528715156020820152908101929092526060820185905260808201527f176baa8506823dad86d30547ef1da020b7adbd4357cfbe3c8250fe640a4f9d72925060a001905060405180910390a1505050565b60606000610c3760056123f0565b6001600160401b03811115610c4e57610c4e61290e565b604051908082528060200260200182016040528015610c77578160200160208202803683370190505b50905060005b610c8760056123f0565b8110156107d657610c996005826123fa565b828281518110610cab57610cab612924565b6020908102919091010152600101610c7d565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d919061293a565b90506000606460025483610d8191906128a5565b610d8b91906128bc565b9050606460035482610d9d91906128a5565b610da791906128bc565b9250505090565b604051632474521560e21b8152600080516020612b8083398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a91906128f1565b610e6957604051630d175fff60e31b81523360048201526024016105bd565b6000610e73610cbe565b60015460048054604051635df0d03b60e01b8152918201849052602482019290925260448101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660648301523060848301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690635df0d03b9060a4016020604051808303816000875af1158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f48919061293a565b9050610f55600582612406565b50600154600454604080518481526020810193909352820184905260608201527ffef22ca5312edf9ea30ab84bf1782d2214c755a8d3bc73cb6fcb806e9a80e48e9060800160405180910390a15050565b6110296040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160401b0316815260200160006001600160a01b0316815260200160001515815260200160006001600160a01b031681526020016000151581525090565b50600090815260076020818152604092839020835161018081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a0820152600683015460c0820152908201546001600160401b03811660e08301526001600160a01b03600160401b8204811661010084015260ff600160e01b90920482161515610120840152600890930154928316610140830152600160a01b909204909116151561016082015290565b60008181526007602081815260408084208151610180810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301819052600582015460a08401819052600683015460c0850152938201546001600160401b03811660e08501526001600160a01b03600160401b8204811661010086015260ff600160e01b90920482161515610120860152600890930154928316610140850152600160a01b90920490911615156101608301528392612710916111bd916128a5565b6111c791906128bc565b9250828160a001516111d99190612823565b915050915091565b6111e9612366565b60008281526007602052604090206003810154600282015461120b9190612823565b42101561122e57604051636bcd5a6360e11b8152600481018490526024016105bd565b60088101805460ff60a01b19169055600581015461129a906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033907f000000000000000000000000000000000000000000000000000000000000000090612390565b60405163ac9cf4db60e01b8152600481018490526001600160a01b0383811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063ac9cf4db906044016106e8565b6113436040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b604051637f6634a760e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637f6634a79060240160e060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc9190612989565b92915050565b60006113de60056123f0565b905090565b60006113cc6005836123fa565b604051632474521560e21b8152600080516020612b8083398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c91906128f1565b6114ab57604051630d175fff60e31b81523360048201526024016105bd565b600184905560028390556003829055600481905560408051858152602081018590529081018390527f134470e0ac0ddc6e2f8874560f57ce11176093ce7b6913c95fa3db12688beea39060600160405180910390a150505050565b604051632474521560e21b8152600080516020612b8083398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a291906128f1565b6115c157604051630d175fff60e31b81523360048201526024016105bd565b604051631b3b867160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631b3b86719060240160e060405180830381865afa158015611629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164d9190612a05565b60098054919250600091908261166283612a6b565b9190505590506040518061018001604052808281526020018481526020016000815260200183602001518152602001600454815260200183600001518152602001836040015181526020018360a001516001600160401b0316815260200183606001516001600160a01b031681526020018360c001511515815260200183608001516001600160a01b031681526020016000151581525060076000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160070160086101000a8154816001600160a01b0302191690836001600160a01b0316021790555061012082015181600701601c6101000a81548160ff0219169083151502179055506101408201518160080160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101608201518160080160146101000a81548160ff02191690831515021790555090505081608001516001600160a01b031681847fc1f8132de989b30ab3c8787441461ac4dea436ced5c7f321f0192c6151793aa1856020015160045487600001518860a0015189606001518a604001518b60c001516040516118859796959493929190612a84565b60405180910390a4505050565b604051632474521560e21b8152600080516020612b8083398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e91906128f1565b61194d57604051630d175fff60e31b81523360048201526024016105bd565b6001600160401b0391909116600090815260086020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b61198e612366565b60008181526007602052604090206002810154156119c257604051636779a5d960e01b8152600481018390526024016105bd565b60088101546001600160a01b03163314611a0657600881015460405163c7b393c960e01b81523360048201526001600160a01b0390911660248201526044016105bd565b6007810154600160e01b900460ff161515600003611abd5760078101546006820154604051632142170760e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820192909252600160401b90920416906342842e0e90606401600060405180830381600087803b158015611aa057600080fd5b505af1158015611ab4573d6000803e3d6000fd5b50505050611b06565b60068101546007820154611b0691600160401b9091046001600160a01b03169033907f000000000000000000000000000000000000000000000000000000000000000090612390565b600881015460058201546040516352eb00a360e01b81526001600160a01b03928316600482015260248101919091527f0000000000000000000000000000000000000000000000000000000000000000909116906352eb00a390604401600060405180830381600087803b158015611b7d57600080fd5b505af1158015611b91573d6000803e3d6000fd5b5050426002840181905560088401805460ff60a01b1916600160a01b1790556040518593507f403a7b0a1d0aaf90fc432d8fbc7bef046b5df6600a52edd0c2aeb7d3772cfeeb9250611be591815260200190565b60405180910390a2506109886001600055565b611c00612366565b6000818152600760205260409020600281015415611c3457604051636779a5d960e01b8152600481018390526024016105bd565b60088101546001600160a01b03163314611c7857600881015460405163c7b393c960e01b81523360048201526001600160a01b0390911660248201526044016105bd565b60405163622fe39f60e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063622fe39f90602401608060405180830381865afa158015611ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d049190612ac8565b9050806040015160ff166000148015611d1f57506060810151155b15611d4057604051636ae1d49d60e01b8152600481018490526024016105bd565b600882015460058301546040516352eb00a360e01b81526001600160a01b03928316600482015260248101919091527f0000000000000000000000000000000000000000000000000000000000000000909116906352eb00a390604401600060405180830381600087803b158015611db757600080fd5b505af1158015611dcb573d6000803e3d6000fd5b5050426002850181905560088501805460ff60a01b1916600160a01b1790556040518693507f403a7b0a1d0aaf90fc432d8fbc7bef046b5df6600a52edd0c2aeb7d3772cfeeb9250611e1f91815260200190565b60405180910390a250506109886001600055565b611e3b612366565b60008181526007602052604090206008810154600160a01b900460ff16611e7857604051638db4d94d60e01b8152600481018390526024016105bd565b60088101546001600160a01b03163314611ebc57600881015460405163c7b393c960e01b81523360048201526001600160a01b0390911660248201526044016105bd565b600061271082600401548360050154611ed591906128a5565b611edf91906128bc565b90506000818360050154611ef39190612823565b9050611f4a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000084612390565b60078301546001600160401b03811660008181526008602081815260409283902054835160c0810185528a815260068a01549281019290925260018285015260ff600160e01b870416151560608301526001600160a01b03600160401b9096048616608083015291880154851660a08201529151635dde677b60e11b81527f000000000000000000000000000000000000000000000000000000000000000085169463bbbccef6946108f89490939190911691600401612836565b61200d612366565b6000818152600760208181526040928390208351610180810185528154815260018201549281019290925260028101549382018490526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152918201546001600160401b03811660e08301526001600160a01b03600160401b8204811661010084015260ff600160e01b90920482161515610120840152600890930154928316610140830152600160a01b909204909116151561016082015290156120ed57604051636779a5d960e01b8152600481018390526024016105bd565b6101408101516001600160a01b031633146121335761014081015160405163c7b393c960e01b81523360048201526001600160a01b0390911660248201526044016105bd565b60e08101516001600160401b038116600090815260086020908152604080832054815160c080820184528882528701519381019390935282820193909352610120850151151560608301526101008501516001600160a01b039081166080840152610140860151811660a08401529051635dde677b60e11b81527f000000000000000000000000000000000000000000000000000000000000000082169463bbbccef6946121e79491931691600401612836565b600060405180830381600087803b15801561220157600080fd5b505af1158015612215573d6000803e3d6000fd5b505050508061014001516001600160a01b0316827f603c05de9ebb1e0a2af29b53c11f1962b081cefb4596e42eb74e550770a3dfa1836060015184608001518560a001518660e001518761010001518860c001518961012001516040516122829796959493929190612a84565b60405180910390a3506109886001600055565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612344919061293a565b905060646002548261235691906128a5565b61236091906128bc565b91505090565b60026000540361238957604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526123ea908590612412565b50505050565b60006113cc825490565b6000610a60838361247a565b6000610a6083836124a4565b60006124276001600160a01b038416836124f3565b9050805160001415801561244c57508080602001905181019061244a91906128f1565b155b1561247557604051635274afe760e01b81526001600160a01b03841660048201526024016105bd565b505050565b600082600001828154811061249157612491612924565b9060005260206000200154905092915050565b60008181526001830160205260408120546124eb575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556113cc565b5060006113cc565b6060610a608383600084600080856001600160a01b031684866040516125199190612b50565b60006040518083038185875af1925050503d8060008114612556576040519150601f19603f3d011682016040523d82523d6000602084013e61255b565b606091505b509150915061256b868383612575565b9695505050505050565b60608261258a57612585826125d1565b610a60565b81511580156125a157506001600160a01b0384163b155b156125ca57604051639996b31560e01b81526001600160a01b03851660048201526024016105bd565b5080610a60565b8051156125e15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b038116811461098857600080fd5b6000806040838503121561262257600080fd5b823591506020830135612634816125fa565b809150509250929050565b60006020828403121561265157600080fd5b5035919050565b801515811461098857600080fd5b6000806040838503121561267957600080fd5b82359150602083013561263481612658565b6020808252825182820181905260009190848201906040850190845b818110156126c3578351835292840192918401916001016126a7565b50909695505050505050565b600061018082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161273260e08401826001600160401b03169052565b50610100838101516001600160a01b0390811691840191909152610120808501511515908401526101408085015190911690830152610160928301511515929091019190915290565b6001600160401b038116811461098857600080fd5b6000602082840312156127a257600080fd5b8135610a608161277b565b600080600080608085870312156127c357600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156127f257600080fd5b82356127fd8161277b565b91506020830135612634816125fa565b634e487b7160e01b600052601160045260246000fd5b808201808211156113cc576113cc61280d565b6000610100820190506001600160401b038516825260018060a01b038085166020840152835160408401526020840151606084015260ff60408501511660808401526060840151151560a08401528060808501511660c08401528060a08501511660e084015250949350505050565b80820281158282048414176113cc576113cc61280d565b6000826128d957634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156113cc576113cc61280d565b60006020828403121561290357600080fd5b8151610a6081612658565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561294c57600080fd5b5051919050565b60405160e081016001600160401b038111828210171561298357634e487b7160e01b600052604160045260246000fd5b60405290565b600060e0828403121561299b57600080fd5b6129a3612953565b8251815260208301516020820152604083015160408201526060830151606082015260808301516129d3816125fa565b608082015260a08301516129e6816125fa565b60a082015260c08301516129f981612658565b60c08201529392505050565b600060e08284031215612a1757600080fd5b612a1f612953565b8251815260208301516020820152604083015160408201526060830151612a45816125fa565b60608201526080830151612a58816125fa565b608082015260a08301516129e68161277b565b600060018201612a7d57612a7d61280d565b5060010190565b968752602087019590955260408601939093526001600160401b039190911660608501526001600160a01b0316608084015260a0830152151560c082015260e00190565b600060808284031215612ada57600080fd5b604051608081018181106001600160401b0382111715612b0a57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160ff81168114612b3157600080fd5b60408201526060830151612b4481612658565b60608201529392505050565b6000825160005b81811015612b715760208186018101518583015201612b57565b50600092019182525091905056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea26469706673582212208a9e259a085c6362895e14d5d9758615446a3d7e42ef2855297a58eb3c655d1064736f6c6343000817003360a060405234801561001057600080fd5b5033608052608051610ae36100526000396000818160d601528181610146015281816102eb015281816103490152818161049201526104eb0152610ae36000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301b7053b1461005c578063150b7a02146100845780631e7046db146100bc5780637a091063146100d1578063ac9cf4db14610110575b600080fd5b61006f61006a366004610805565b610123565b60405190151581526020015b60405180910390f35b6100a3610092366004610833565b630a85bd0160e11b95945050505050565b6040516001600160e01b0319909116815260200161007b565b6100cf6100ca366004610805565b6102e0565b005b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007b565b6100cf61011e3660046108d2565b610487565b60405163622fe39f60e01b81526004810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063622fe39f9060240161018060405180830381865afa15801561018e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b29190610972565b9050806101600151156102da57610120810151151560000361025c5761010081015160c08201516040516331a9108f60e11b8152600481019190915230916001600160a01b031690636352211e90602401602060405180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102449190610a2d565b6001600160a01b03160361025757600191505b6102da565b60c08101516101008201516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610a4a565b106102da57600191505b50919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461033057604051633733be5960e21b81523360048201526024015b60405180910390fd5b60405163622fe39f60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063622fe39f9060240161018060405180830381865afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd9190610972565b9050806101600151156104835761012081015115156000036104575761010081015161014082015160c0830151604051632142170760e11b81523060048201526001600160a01b03928316602482015260448101919091529116906342842e0e90606401600060405180830381600087803b15801561043b57600080fd5b505af115801561044f573d6000803e3d6000fd5b505050505050565b6104838161014001518260c001518361010001516001600160a01b031661061f9092919063ffffffff16565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104d257604051633733be5960e21b8152336004820152602401610327565b60405163622fe39f60e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063622fe39f9060240161018060405180830381865afa15801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f9190610972565b905080610160015161061a5761012081015115156000036105f35761010081015160c0820151604051632142170760e11b81523060048201526001600160a01b03858116602483015260448201929092529116906342842e0e90606401600060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b50505050505050565b61061a828260c001518361010001516001600160a01b031661061f9092919063ffffffff16565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b17905261061a9185919060009061067d908416836106cb565b905080516000141580156106a25750808060200190518101906106a09190610a63565b155b1561061a57604051635274afe760e01b81526001600160a01b0384166004820152602401610327565b60606106d9838360006106e0565b9392505050565b6060814710156107055760405163cd78605960e01b8152306004820152602401610327565b600080856001600160a01b031684866040516107219190610a7e565b60006040518083038185875af1925050503d806000811461075e576040519150601f19603f3d011682016040523d82523d6000602084013e610763565b606091505b509150915061077386838361077d565b9695505050505050565b6060826107925761078d826107d9565b6106d9565b81511580156107a957506001600160a01b0384163b155b156107d257604051639996b31560e01b81526001600160a01b0385166004820152602401610327565b50806106d9565b8051156107e95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60006020828403121561081757600080fd5b5035919050565b6001600160a01b038116811461080257600080fd5b60008060008060006080868803121561084b57600080fd5b85356108568161081e565b945060208601356108668161081e565b935060408601359250606086013567ffffffffffffffff8082111561088a57600080fd5b818801915088601f83011261089e57600080fd5b8135818111156108ad57600080fd5b8960208285010111156108bf57600080fd5b9699959850939650602001949392505050565b600080604083850312156108e557600080fd5b8235915060208301356108f78161081e565b809150509250929050565b604051610180810167ffffffffffffffff8111828210171561093457634e487b7160e01b600052604160045260246000fd5b60405290565b805167ffffffffffffffff8116811461095257600080fd5b919050565b80516109528161081e565b8051801515811461095257600080fd5b6000610180828403121561098557600080fd5b61098d610902565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526109d960e0840161093a565b60e08201526101006109ec818501610957565b908201526101206109fe848201610962565b90820152610140610a10848201610957565b90820152610160610a22848201610962565b908201529392505050565b600060208284031215610a3f57600080fd5b81516106d98161081e565b600060208284031215610a5c57600080fd5b5051919050565b600060208284031215610a7557600080fd5b6106d982610962565b6000825160005b81811015610a9f5760208186018101518583015201610a85565b50600092019182525091905056fea2646970667358221220852e91d8afdc2fc2ea45754205b2b9b99faf0a2ac9f4ff69c5836b6c61eaceab64736f6c6343000817003360e06040523480156200001157600080fd5b5060405162001959380380620019598339810160408190526200003491620000b2565b826001600160a01b03811662000064576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b6001600160a01b03908116608052600580546001600160a01b031916938216939093179092553360a0521660c0525062000106565b6001600160a01b0381168114620000af57600080fd5b50565b600080600060608486031215620000c857600080fd5b8351620000d58162000099565b6020850151909350620000e88162000099565b6040850151909250620000fb8162000099565b809150509250925092565b60805160a05160c0516117f96200016060003960008181610326015281816103bb0152818161067b01528181610c1a0152610d0001526000818161027501526107890152600081816102d701526105fe01526117f96000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637a09106311610097578063bbbccef611610066578063bbbccef6146102fb578063db04fa491461030e578063e2fff82914610321578063eab5b02c1461034857600080fd5b80637a0910631461027057806385572ffb146102af57806396d3b83d146102c2578063b0f479a1146102d557600080fd5b80635917d7c1116100d35780635917d7c11461015a5780636159ada11461017a578063622fe39f1461019d57806375c67c661461024d57600080fd5b806301ffc9a7146100fa5780633aeac4e1146101225780634030d52114610137575b600080fd5b61010d61010836600461108f565b61035b565b60405190151581526020015b60405180910390f35b6101356101303660046110d5565b610392565b005b61010d61014536600461112a565b60026020526000908152604090205460ff1681565b61016d610168366004611145565b610559565b60405161011991906111a4565b61010d6101883660046111b7565b60036020526000908152604090205460ff1681565b6102156101ab366004611145565b604080516080808201835260008083526020808401829052838501829052606093840182905294815260048552839020835191820184528054825260018101549482019490945260029093015460ff80821693850193909352610100900490911615159082015290565b6040516101199190815181526020808301519082015260408083015160ff169082015260609182015115159181019190915260800190565b61010d61025b36600461112a565b60016020526000908152604090205460ff1681565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610119565b6101356102bd3660046111d4565b6105f3565b6101356102d036600461121c565b610652565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b610135610309366004611248565b610738565b61013561031c36600461121c565b610bf1565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b61013561035636600461129a565b610cd7565b60006001600160e01b031982166385572ffb60e01b148061038c57506001600160e01b031982166301ffc9a760e01b145b92915050565b604051632474521560e21b81526000805160206117a483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e91906112b8565b61045257604051630d175fff60e31b81523360048201526024015b60405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd91906112d5565b9050806000036104e057604051630686827b60e51b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906112b8565b50505050565b60006020819052908152604090208054610572906112ee565b80601f016020809104026020016040519081016040528092919081815260200182805461059e906112ee565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461063e576040516335fdcccd60e21b8152336004820152602401610449565b61064f61064a826114d3565b610dbd565b50565b604051632474521560e21b81526000805160206117a483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee91906112b8565b61070d57604051630d175fff60e31b8152336004820152602401610449565b6001600160401b03919091166000908152600160205260409020805460ff1916911515919091179055565b6001600160401b038316600090815260016020526040902054839060ff1661077e57604051630a503cdb60e01b81526001600160401b0382166004820152602401610449565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107c95760405163effcd4cf60e01b8152336004820152602401610449565b6000826040516020016107dc919061158e565b60408051601f1981840301815291905260055490915060009061080b90869084906001600160a01b0316610f6b565b90506000306001600160a01b031663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561084d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108719190611608565b90506000816001600160a01b03166320487ded89856040518363ffffffff1660e01b81526004016108a3929190611625565b602060405180830381865afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906112d5565b6005546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a0823190602401602060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095191906112d5565b8111156109e8576005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c491906112d5565b604051634787a10360e11b8152600481019190915260248101829052604401610449565b60055460405163095ea7b360e01b81526001600160a01b038481166004830152602482018490529091169063095ea7b3906044016020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f91906112b8565b506040516396f4e9f960e01b81526000906001600160a01b038416906396f4e9f990610a91908c908890600401611625565b6020604051808303816000875af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad491906112d5565b873560009081526004602052604090819020600101829055909150610aff9060608901908901611701565b8735600081815260046020908152604091829020600201805460ff191660ff9590951694909417909355909183917f2cc2a7651489ecbeeebe0862149ef3451d4001679efe808f5c8b7e4f1d6e0584918b0135908d90610b659060608e01908e01611701565b610b7560808e0160608f0161171e565b8d6080016020810190610b8891906111b7565b8e60a0016020810190610b9b91906111b7565b604080519687526001600160401b03909516602087015260ff90931693850193909352151560608401526001600160a01b0391821660808401521660a082015260c00160405180910390a3505050505050505050565b604051632474521560e21b81526000805160206117a483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d91906112b8565b610cac57604051630d175fff60e31b8152336004820152602401610449565b6001600160401b03919091166000908152600260205260409020805460ff1916911515919091179055565b604051632474521560e21b81526000805160206117a483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7391906112b8565b610d9257604051630d175fff60e31b8152336004820152602401610449565b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b80602001518160400151806020019051810190610dda9190611608565b6001600160401b03821660009081526002602052604090205460ff16610e1e576040516326bfad9160e21b81526001600160401b0383166004820152602401610449565b6001600160a01b03811660009081526003602052604090205460ff16610e62576040516338c08ef960e11b81526001600160a01b0382166004820152602401610449565b60008360600151806020019051810190610e7c919061173b565b60408181015182516000908152600460209081528382206002908101805461ff00191661010095151595909502949094179093558085015185518352848320909301805460ff191660ff9094169390931790925587518451825290839020558681015187519288015180519495506001600160401b03909116937f7e5507e9a8d7f61eafce00d842e19dbd90aca18232c89ca598779e2aabca768c92610f289291820181019101611608565b845160208087015160408089015181516001600160a01b039690961686529285019390935260ff168383015215156060830152519081900360800190a350505050565b610fa66040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b6040805160a081019091526001600160a01b03851660c08201528060e0810160408051808303601f19018152918152908252602080830187905281516000808252918101835292909101919061101e565b6040805180820190915260008082526020820152815260200190600190039081610ff75790505b508152602001836001600160a01b03168152602001611085604051806020016040528062030d4081525060408051915160248084019190915281518084039091018152604490920190526020810180516001600160e01b03166397a657c960e01b17905290565b9052949350505050565b6000602082840312156110a157600080fd5b81356001600160e01b0319811681146110b957600080fd5b9392505050565b6001600160a01b038116811461064f57600080fd5b600080604083850312156110e857600080fd5b82356110f3816110c0565b91506020830135611103816110c0565b809150509250929050565b80356001600160401b038116811461112557600080fd5b919050565b60006020828403121561113c57600080fd5b6110b98261110e565b60006020828403121561115757600080fd5b5035919050565b6000815180845260005b8181101561118457602081850181015186830182015201611168565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110b9602083018461115e565b6000602082840312156111c957600080fd5b81356110b9816110c0565b6000602082840312156111e657600080fd5b81356001600160401b038111156111fc57600080fd5b820160a081850312156110b957600080fd5b801515811461064f57600080fd5b6000806040838503121561122f57600080fd5b6112388361110e565b915060208301356111038161120e565b600080600083850361010081121561125f57600080fd5b6112688561110e565b93506020850135611278816110c0565b925060c0603f198201121561128c57600080fd5b506040840190509250925092565b600080604083850312156112ad57600080fd5b8235611238816110c0565b6000602082840312156112ca57600080fd5b81516110b98161120e565b6000602082840312156112e757600080fd5b5051919050565b600181811c9082168061130257607f821691505b60208210810361132257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561136057611360611328565b60405290565b60405160a081016001600160401b038111828210171561136057611360611328565b604051601f8201601f191681016001600160401b03811182821017156113b0576113b0611328565b604052919050565b600082601f8301126113c957600080fd5b81356001600160401b038111156113e2576113e2611328565b6113f5601f8201601f1916602001611388565b81815284602083860101111561140a57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261143857600080fd5b813560206001600160401b0382111561145357611453611328565b611461818360051b01611388565b82815260069290921b8401810191818101908684111561148057600080fd5b8286015b848110156114c8576040818903121561149d5760008081fd5b6114a561133e565b81356114b0816110c0565b81528185013585820152835291830191604001611484565b509695505050505050565b600060a082360312156114e557600080fd5b6114ed611366565b823581526114fd6020840161110e565b602082015260408301356001600160401b038082111561151c57600080fd5b611528368387016113b8565b6040840152606085013591508082111561154157600080fd5b61154d368387016113b8565b6060840152608085013591508082111561156657600080fd5b5061157336828601611427565b60808301525092915050565b60ff8116811461064f57600080fd5b813581526020808301359082015260c0810160408301356115ae8161157f565b60ff16604083015260608301356115c48161120e565b1515606083015260808301356115d9816110c0565b6001600160a01b03908116608084015260a0840135906115f8826110c0565b80821660a0850152505092915050565b60006020828403121561161a57600080fd5b81516110b9816110c0565b600060406001600160401b03851683526020604081850152845160a0604086015261165360e086018261115e565b905081860151603f1980878403016060880152611670838361115e565b6040890151888203830160808a01528051808352908601945060009350908501905b808410156116c457845180516001600160a01b0316835286015186830152938501936001939093019290860190611692565b5060608901516001600160a01b031660a08901526080890151888203830160c08a015295506116f3818761115e565b9a9950505050505050505050565b60006020828403121561171357600080fd5b81356110b98161157f565b60006020828403121561173057600080fd5b81356110b98161120e565b60006060828403121561174d57600080fd5b604051606081018181106001600160401b038211171561176f5761176f611328565b6040528251815260208301516117848161157f565b602082015260408301516117978161120e565b6040820152939250505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea26469706673582212203510eb053fad8fdf63db191a577bfc2445649df7a7212c94dcd1b1a243c7cbf664736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80637065cb481161008a578063d5c8c1a011610059578063d5c8c1a01461034d578063e2fff82914610381578063e371aa22146103b5578063f964711b146103c857610134565b80637065cb48146102a157806376878ebb146102c15780638f7073be1461030d578063970a52b01461032d57610134565b8063487ede04116100c6578063487ede041461021457806352eb00a314610234578063530ada5a14610254578063638181b31461028157610134565b8063173825d9146101665780633583849a146101885780633fd8c992146101d45780634769d36b146101f457610134565b366101345760405134815233907f8896b78bee3425f51a871baaeba673d465e036b59282c65dece71c53e9078b62906020015b60405180910390a2005b60405134815233907f8896b78bee3425f51a871baaeba673d465e036b59282c65dece71c53e9078b629060200161012a565b34801561017257600080fd5b50610186610181366004611a15565b6103e8565b005b34801561019457600080fd5b506101bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff90911681526020015b60405180910390f35b3480156101e057600080fd5b506101866101ef366004611a39565b61055a565b34801561020057600080fd5b5061018661020f366004611a6e565b610716565b34801561022057600080fd5b5061018661022f366004611a87565b610910565b34801561024057600080fd5b5061018661024f366004611a87565b610aac565b34801561026057600080fd5b5061027461026f366004611ab3565b610bb4565b6040516101cb9190611b28565b34801561028d57600080fd5b5061018661029c366004611b6c565b610cc3565b3480156102ad57600080fd5b506101866102bc366004611a15565b610f52565b3480156102cd57600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cb565b34801561031957600080fd5b50610186610328366004611a39565b6110bf565b34801561033957600080fd5b50610186610348366004611a6e565b6112ea565b34801561035957600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561038d57600080fd5b506102f57f000000000000000000000000000000000000000000000000000000000000000081565b6101866103c3366004611a87565b611575565b3480156103d457600080fd5b506101866103e3366004611a87565b611721565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611bad565b6104a857604051633733be5960e21b81523360048201526024015b60405180910390fd5b604051632716f7ad60e21b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639c5bdeb490602401600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b50506040516001600160a01b03841692507f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9150600090a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190611bad565b61061557604051633733be5960e21b815233600482015260240161049f565b60405163a415bcad60e01b81526001600160a01b038481166004830152602482018490526044820183905261ffff7f00000000000000000000000000000000000000000000000000000000000000001660648301523060848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a401600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b50505050826001600160a01b03167f8b2e69af5d0f812e8aa27147468f28ff71ec055b28822bc4ca66c744ad583b318360405161070991815260200190565b60405180910390a2505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190611bad565b6107d157604051633733be5960e21b815233600482015260240161049f565b60405163a415bcad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600260448301527f000000000000000000000000000000000000000000000000000000000000000061ffff1660648301523060848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a401600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f8b2e69af5d0f812e8aa27147468f28ff71ec055b28822bc4ca66c744ad583b318260405161090591815260200190565b60405180910390a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611bad565b6109cb57604051633733be5960e21b815233600482015260240161049f565b604051631a4ca37b60e21b81526001600160a01b038381166004830152602482018390523060448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec906064016020604051808303816000875af1158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190611bcf565b50816001600160a01b03167f945c3b2ab3acdd0d9231c146b13ebe44f4f39b3cf65d6d67808118c9e436146b82604051610aa091815260200190565b60405180910390a25050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af757604051633733be5960e21b815233600482015260240161049f565b604051630c04a8a160e41b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c04a8a1090604401600060405180830381600087803b158015610b6157600080fd5b505af1158015610b75573d6000803e3d6000fd5b50505050816001600160a01b03167f800e1fdc7a7ff328f894ab006cf57c9e224d378a6ed06a97d7894a949b18d4b582604051610aa091815260200190565b60608167ffffffffffffffff811115610bcf57610bcf611be8565b604051908082528060200260200182016040528015610bf8578160200160208202803683370190505b50905060005b82811015610cbc57838382818110610c1857610c18611bfe565b9050602002016020810190610c2d9190611a15565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190611bcf565b828281518110610ca957610ca9611bfe565b6020908102919091010152600101610bfe565b5092915050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190611bad565b610d7e57604051633733be5960e21b815233600482015260240161049f565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190611bcf565b1015610e8c576040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a08231906024015b602060405180830381865afa158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b9190611bcf565b60405162eb9b8760e61b81526001600160a01b0390931660048401526024830191909152604482015260640161049f565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190611bad565b50826001600160a01b0316826001600160a01b03167fda3b4ed9c4aa8e8357ddf75f4eca29a990b129f9f9cde598963b1f14a196ebb983604051610f4591815260200190565b60405180910390a3505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee9190611bad565b61100d57604051633733be5960e21b815233600482015260240161049f565b60405163397a8bab60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063397a8bab90602401600060405180830381600087803b15801561107057600080fd5b505af1158015611084573d6000803e3d6000fd5b50506040516001600160a01b03841692507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c39150600090a250565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190611bad565b61117a57604051633733be5960e21b815233600482015260240161049f565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905284169063095ea7b3906044016020604051808303816000875af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190611bad565b5060405163573ade8160e01b81526001600160a01b03848116600483015260248201849052604482018390523060648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af115801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190611bcf565b50826001600160a01b03167ff01596bfb877bede5ef96e3d3d1d2e2823cadba79814dbc4b615fa39aed409818360405161070991815260200190565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113869190611bad565b6113a557604051633733be5960e21b815233600482015260240161049f565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190611bad565b5060405163573ade8160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600260448301523060648301527f0000000000000000000000000000000000000000000000000000000000000000169063573ade81906084016020604051808303816000875af11580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190611bcf565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167ff01596bfb877bede5ef96e3d3d1d2e2823cadba79814dbc4b615fa39aed409818260405161090591815260200190565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116119190611bad565b61163057604051633733be5960e21b815233600482015260240161049f565b804710156116605760405162eb9b8760e61b8152600060048201526024810182905247604482015260640161049f565b600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146116ae576040519150601f19603f3d011682016040523d82523d6000602084013e6116b3565b606091505b5091509150816116d85780604051637b5915d360e11b815260040161049f9190611c14565b836001600160a01b03167fb121b9f323a25ff676670f214a9dd304cc044406c4a5d73ffb9f40fb051125548460405161171391815260200190565b60405180910390a250505050565b604051632474521560e21b8152600080516020611c6483398151915260048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190611bad565b6117dc57604051633733be5960e21b815233600482015260240161049f565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190611bcf565b101561187c576040516370a0823160e01b8152306004820152829082906001600160a01b038316906370a0823190602401610e1a565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af11580156118eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190f9190611bad565b5060405163617ba03760e01b81526001600160a01b0383811660048301526024820183905230604483015261ffff7f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000169063617ba03790608401600060405180830381600087803b1580156119aa57600080fd5b505af11580156119be573d6000803e3d6000fd5b50505050816001600160a01b03167f15830ad89052cd588c4c4f5bf9d998ce3337effc05c54cef8a8bc2ecc47c845982604051610aa091815260200190565b6001600160a01b0381168114611a1257600080fd5b50565b600060208284031215611a2757600080fd5b8135611a32816119fd565b9392505050565b600080600060608486031215611a4e57600080fd5b8335611a59816119fd565b95602085013595506040909401359392505050565b600060208284031215611a8057600080fd5b5035919050565b60008060408385031215611a9a57600080fd5b8235611aa5816119fd565b946020939093013593505050565b60008060208385031215611ac657600080fd5b823567ffffffffffffffff80821115611ade57600080fd5b818501915085601f830112611af257600080fd5b813581811115611b0157600080fd5b8660208260051b8501011115611b1657600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611b6057835183529284019291840191600101611b44565b50909695505050505050565b600080600060608486031215611b8157600080fd5b8335611b8c816119fd565b92506020840135611b9c816119fd565b929592945050506040919091013590565b600060208284031215611bbf57600080fd5b81518015158114611a3257600080fd5b600060208284031215611be157600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020808352835180602085015260005b81811015611c4257858101830151858201604001528201611c26565b506000604082860101526040601f19601f830116850101925050509291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220c21a1eb5b8b750d36ef4750e8279e3d92bae167c3b46f5e916646e932aa750a364736f6c63430008170033",
  "devdoc": {
    "author": "GhoSafe Protocol",
    "events": {
      "CreditDelegateApproved(address,uint256)": {
        "params": {
          "amount": "Amount of GHO approved",
          "delegatee": "Address of the delegatee"
        }
      },
      "ERC20WithdrawnFromSafe(address,uint256,address)": {
        "params": {
          "amount": "Amount of the token withdrawn",
          "to": "Address that received the token",
          "token": "Address of the token withdrawn"
        }
      },
      "ETHWithdrawnFromSafe(uint256,address)": {
        "params": {
          "amount": "Amount of ETH withdrawn",
          "to": "Address that received the ETH"
        }
      },
      "OwnerAdded(address)": {
        "params": {
          "owner": "Address of the new owner"
        }
      },
      "OwnerRemoved(address)": {
        "params": {
          "owner": "Address of the removed owner"
        }
      },
      "ReceivedETH(uint256,address)": {
        "params": {
          "amount": "Amount of ETH received",
          "from": "Address that sent the ETH"
        }
      },
      "TokenBorrowedFromAave(address,uint256)": {
        "params": {
          "amount": "Amount of the token borrowed",
          "token": "Address of the token borrowed"
        }
      },
      "TokenRepaidToAave(address,uint256)": {
        "params": {
          "amount": "Amount of the token repaid",
          "token": "Address of the token repaid"
        }
      },
      "TokenSuppliedToAave(address,uint256)": {
        "params": {
          "amount": "Amount of the token supplied",
          "token": "Address of the token supplied"
        }
      },
      "TokenWithdrawnFromAave(address,uint256)": {
        "params": {
          "amount": "Amount of the token withdrawn",
          "token": "Address of the token withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "params": {
          "_owner": "Address of the owner to add"
        }
      },
      "approveDelegateCreditGho(address,uint256)": {
        "params": {
          "_amount": "Amount of GHO to approve",
          "_delegatee": "Address of the delegatee"
        }
      },
      "borrowFromAave(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of the token to borrow",
          "_interestRateMode": "Interest rate mode for the borrow",
          "_token": "Address of the ERC20 token"
        }
      },
      "borrowGho(uint256)": {
        "params": {
          "_amount": "Amount of GHO to borrow"
        }
      },
      "constructor": {
        "params": {
          "_debtGhoToken": "Address of the Credit Delegation Token for GHO",
          "_ghoSafeIDSepolia": "Address of the GhoSafeIDSepolia contract",
          "_ghoToken": "Address of the GHO token",
          "_link": "Address of the LINK token",
          "_loanAdvertisementBook": "Address of the LoanAdvertisementBook contract",
          "_owner": "Address of the owner",
          "_pool": "Address of the Aave pool",
          "_referralCode": "Referral code for Aave interactions",
          "_router": "Address of the router contract"
        }
      },
      "getSafeBalances(address[])": {
        "params": {
          "_tokens": "Addresses of the ERC20 tokens to check"
        },
        "returns": {
          "balances": "Balances of the specified tokens"
        }
      },
      "removeOwner(address)": {
        "params": {
          "_owner": "Address of the owner to remove"
        }
      },
      "repayGho(uint256)": {
        "params": {
          "_amount": "Amount of GHO to repay"
        }
      },
      "repayToAave(address,uint256,uint256)": {
        "params": {
          "_amount": "Amount of the token to repay",
          "_rateMode": "Interest rate mode for the repay",
          "_token": "Address of the ERC20 token"
        }
      },
      "supplyToAave(address,uint256)": {
        "params": {
          "_amount": "Amount of the token to supply",
          "_token": "Address of the ERC20 token"
        }
      },
      "withdrawETHFromSafe(address,uint256)": {
        "params": {
          "_amount": "Amount of ETH to withdraw",
          "_to": "Address that will receive the ETH"
        }
      },
      "withdrawFromAave(address,uint256)": {
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_token": "Address of the ERC20 token"
        }
      },
      "withdrawFromSafe(address,address,uint256)": {
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_to": "Address that will receive the token",
          "_token": "Address of the ERC20 token"
        }
      }
    },
    "stateVariables": {
      "AAVE_POOL": {
        "details": "Aave's lending pool address on Sepolia: https://sepolia.etherscan.io/address/0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951"
      },
      "DEBT_GHO_TOKEN": {
        "details": "Credit Delegation Token for GHO on Sepolia: https://sepolia.etherscan.io/address/0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844"
      },
      "GHO_TOKEN": {
        "details": "GHO token address on Sepolia: https://sepolia.etherscan.io/address/0xc4bF5CbDaBE595361438F8c6a187bDc330539c60"
      }
    },
    "title": "SafeSepolia Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ETHTtransferFailed(bytes)": [
        {
          "notice": "ETH transfer failed error"
        }
      ],
      "NotEnoughBalance(address,uint256,uint256)": [
        {
          "notice": "Not enough balance error"
        }
      ],
      "UnauthorizedAccess(address)": [
        {
          "notice": "Unauthorized access error"
        }
      ]
    },
    "events": {
      "CreditDelegateApproved(address,uint256)": {
        "notice": "Event emitted when a delegatee is approved to spend a specific amount of GHO"
      },
      "ERC20WithdrawnFromSafe(address,uint256,address)": {
        "notice": "Event emitted when a ERC20 is withdrawn from the safe"
      },
      "ETHWithdrawnFromSafe(uint256,address)": {
        "notice": "Event emitted when ETH is withdrawn from the safe"
      },
      "OwnerAdded(address)": {
        "notice": "Event emitted when a new owner is added"
      },
      "OwnerRemoved(address)": {
        "notice": "Event emitted when an owner is removed"
      },
      "ReceivedETH(uint256,address)": {
        "notice": "Event emitted ETH is received by the contract"
      },
      "TokenBorrowedFromAave(address,uint256)": {
        "notice": "Event emitted when a ERC20 is borrowed from Aave"
      },
      "TokenRepaidToAave(address,uint256)": {
        "notice": "Event emitted when a ERC20 is repaid to Aave"
      },
      "TokenSuppliedToAave(address,uint256)": {
        "notice": "Event emitted when a ERC20 is supplied to Aave"
      },
      "TokenWithdrawnFromAave(address,uint256)": {
        "notice": "Event emitted when a ERC20 is withdrawn from Aave"
      }
    },
    "kind": "user",
    "methods": {
      "REFERRAL_CODE()": {
        "notice": "Referral code for Aave interactions."
      },
      "USER_ACCESS_MANAGER()": {
        "notice": "Access manager contract."
      },
      "USER_LOAN_MANAGER_ADDRESS()": {
        "notice": "Address of the LoanManager contract."
      },
      "USER_MAILBOX_ADDRESS()": {
        "notice": "Address of the Mailbox contract."
      },
      "addOwner(address)": {
        "notice": "Adds an owner to the contract."
      },
      "approveDelegateCreditGho(address,uint256)": {
        "notice": "Approves a delegatee to spend a specific amount of GHO."
      },
      "borrowFromAave(address,uint256,uint256)": {
        "notice": "Borrows a specific amount of an ERC20 token from Aave."
      },
      "borrowGho(uint256)": {
        "notice": "Borrows GHO from Aave."
      },
      "constructor": {
        "notice": "Constructor"
      },
      "getSafeBalances(address[])": {
        "notice": "Returns the balances of the specified tokens"
      },
      "removeOwner(address)": {
        "notice": "Removes an owner from the contract."
      },
      "repayGho(uint256)": {
        "notice": "Repays GHO to Aave."
      },
      "repayToAave(address,uint256,uint256)": {
        "notice": "Repays a specific amount of an ERC20 token to Aave."
      },
      "supplyToAave(address,uint256)": {
        "notice": "Supplies a specific amount of an ERC20 token to Aave."
      },
      "withdrawETHFromSafe(address,uint256)": {
        "notice": "Withdraws a specific amount of ETH from the contract to a specified address."
      },
      "withdrawFromAave(address,uint256)": {
        "notice": "Withdraws a specific amount of an ERC20 token from Aave."
      },
      "withdrawFromSafe(address,address,uint256)": {
        "notice": "Withdraws a specific amount of an ERC20 token from the contract to a specified address."
      }
    },
    "notice": "Walet contract for managing funds and interacting with Aave",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}