{
  "address": "0x77D08C620728194fF1A4b3dA458f04975568CF1e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IGhoSafeAccessManagerSepolia",
          "name": "_accessManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "GhoSafeIdAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InvalidArgumentsLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditScore",
          "type": "uint256"
        }
      ],
      "name": "CreditScoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditScore",
          "type": "uint256"
        }
      ],
      "name": "GhoSafeIdMinted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_initialCreditScore",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_tokenURI",
          "type": "bytes[]"
        }
      ],
      "name": "batchSafeMin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creditScoreDataOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loansCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmountRepaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creditScore",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGhoSafeIDSepolia.CreditScoreData",
          "name": "creditScoreData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "ghoSafeIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCreditScore",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_tokenURI",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newCreditScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loansCountIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountBorrowedIncrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmountRepaidIncrement",
          "type": "uint256"
        }
      ],
      "name": "updateCreditScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb541cc22f4321c98af7bf6bc4bf4764eb13fc25ad7924cd8e4de5cfd4641a997",
  "receipt": {
    "to": null,
    "from": "0x065A4d3E3727D6826fa81e88c00b2937f8A25D1c",
    "contractAddress": "0x77D08C620728194fF1A4b3dA458f04975568CF1e",
    "transactionIndex": 19,
    "gasUsed": "1303611",
    "logsBloom": "0x
    "blockHash": "0xd974e59f85d800f5c8176aa5cbce8e7061e8f05455e492c5bc663a4c2d58cf61",
    "transactionHash": "0xb541cc22f4321c98af7bf6bc4bf4764eb13fc25ad7924cd8e4de5cfd4641a997",
    "logs": [],
    "blockNumber": 5111295,
    "cumulativeGasUsed": "2716655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GhoSafeID",
    "GSID",
    "0x124AE849075ff729Ffdf49a49519777206F6fF64"
  ],
  "numDeployments": 1,
  "solcInputHash": "864a5f5c932fc35835f8dc35b7bce186",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IGhoSafeAccessManagerSepolia\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"GhoSafeIdAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InvalidArgumentsLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditScore\",\"type\":\"uint256\"}],\"name\":\"CreditScoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditScore\",\"type\":\"uint256\"}],\"name\":\"GhoSafeIdMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialCreditScore\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_tokenURI\",\"type\":\"bytes[]\"}],\"name\":\"batchSafeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creditScoreDataOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loansCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditScore\",\"type\":\"uint256\"}],\"internalType\":\"struct IGhoSafeIDSepolia.CreditScoreData\",\"name\":\"creditScoreData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ghoSafeIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCreditScore\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_tokenURI\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCreditScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loansCountIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountBorrowedIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmountRepaidIncrement\",\"type\":\"uint256\"}],\"name\":\"updateCreditScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"GhoSafe Protocol\",\"events\":{\"CreditScoreUpdated(uint256,uint256)\":{\"params\":{\"creditScore\":\"The credit score of the GhoSafe ID.*\",\"tokenId\":\"The ID of the GhoSafe ID.\"}},\"GhoSafeIdMinted(uint256,address,uint256)\":{\"params\":{\"creditScore\":\"The credit score of the GhoSafe ID.*\",\"owner\":\"The address of the GhoSafe ID owner.\",\"tokenId\":\"The ID of the GhoSafe ID.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Will revert as the token is non-transferable.\"},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of the specified address.\"}},\"batchSafeMin(address[],uint256[],bytes[])\":{\"details\":\"Only callable by addresses with the MINTER_ROLE.\",\"params\":{\"_initialCreditScore\":\"The initial credit score of the token.\",\"_to\":\"The address to mint the token to.\",\"_tokenURI\":\"The token URI of the token.\"}},\"constructor\":{\"params\":{\"_accessManager\":\"The address of the access manager contract.\",\"_name\":\"The token name.\",\"_symbol\":\"The token symbol.\"}},\"creditScoreDataOf(uint256)\":{\"params\":{\"_tokenId\":\"The token ID to retrieve the credit score data of.\"},\"returns\":{\"creditScoreData\":\"The credit score data of the specified token.\"}},\"ghoSafeIdOf(address)\":{\"params\":{\"_owner\":\"The address to retrieve the GhoSafe ID of.\"},\"returns\":{\"tokenId\":\"The GhoSafe ID of the specified address.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Will always return false as the token is non-transferable.\"},\"ownerOf(uint256)\":{\"params\":{\"_tokenId\":\"The token ID to retrieve the owner of.\"},\"returns\":{\"owner\":\"The owner of the specified token.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Only callable by addresses with the MINTER_ROLE.\",\"params\":{\"_initialCreditScore\":\"The initial credit score of the token.\",\"_to\":\"The address to mint the token to.\",\"_tokenURI\":\"The token URI of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Will revert as the token is non-transferable.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Will revert as the token is non-transferable.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Will revert as the token is non-transferable.\"},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface identifier, as specified in ERC-165.\"},\"returns\":{\"isSupported\":\" True if the contract implements interfaceId.\"}},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"The ID of the token to get the URI of.\"},\"returns\":{\"_0\":\"A string representing the token URI.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Will revert as the token is non-transferable.\"},\"updateCreditScore(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Only callable by addresses with the CREDIT_SCORE_OFFICER_ROLE.\",\"params\":{\"_loansCountIncrement\":\"The amount to increment the loans count by.\",\"_newCreditScore\":\"The new credit score of the token.\",\"_tokenId\":\"The token ID to update.\",\"_totalAmountBorrowedIncrement\":\"The amount to increment the total amount borrowed by.\",\"_totalAmountRepaidIncrement\":\"The amount to increment the total amount repaid by.\"}}},\"stateVariables\":{\"ACCESS_MANAGER\":{\"details\":\"Access manager contract.\"},\"_creditScoreData\":{\"details\":\"Mapping from tokenId to Credit Score data.\"},\"_ghoSafeIds\":{\"details\":\"Mapping from owner address to tokenId.\"},\"_owners\":{\"details\":\"Mapping from tokenId to the owner address.\"},\"_tokenCounter\":{\"details\":\"Token ID counter.\"},\"_tokenURIs\":{\"details\":\"Mapping from tokenId to token URI.\"}},\"title\":\"GhoSafeIDSepolia Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"GhoSafeIdAlreadyMinted(address)\":[{\"notice\":\"GhoSafe ID already minted to an address error\"}],\"InvalidArgumentsLength(uint256,uint256)\":[{\"notice\":\"Invalid arguments length error\"}],\"TokenDoesNotExist(uint256)\":[{\"notice\":\"Token ID does not exist error\"}],\"TransferNotAllowed()\":[{\"notice\":\"Transfer not allowed error\"}],\"UnauthorizedAccess(address)\":[{\"notice\":\"Not authorized Caller error\"}]},\"events\":{\"CreditScoreUpdated(uint256,uint256)\":{\"notice\":\"Event emitted when a GhoSafe ID's credit score is updated.\"},\"GhoSafeIdMinted(uint256,address,uint256)\":{\"notice\":\"Event emitted when a new GhoSafe ID is minted.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"balanceOf(address)\":{\"notice\":\"Retrieves the balance of a specific address.\"},\"batchSafeMin(address[],uint256[],bytes[])\":{\"notice\":\"Mints a new GhoSafe ID token to the specified address.\"},\"constructor\":{\"notice\":\"Initializes the contract.\"},\"creditScoreDataOf(uint256)\":{\"notice\":\"Retrieves the credit score data of a specific token.\"},\"ghoSafeIdOf(address)\":{\"notice\":\"Retrieves the GhoSafe ID of a specific address.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"name()\":{\"notice\":\"Token name.\"},\"ownerOf(uint256)\":{\"notice\":\"Retrieves the owner of a specific token.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Mints a new GhoSafe ID token to the specified address.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns true if this contract implements the interface defined by interfaceId. See the corresponding EIP section to learn more about how these ids are created.\"},\"symbol()\":{\"notice\":\"Token symbol.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the URI of the token metadata.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Retrieves the token URI of a specific token.\"},\"updateCreditScore(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Updates the credit score of a specific token.\"}},\"notice\":\"Contract for managing non-transferable tokens associated with users' credit scores.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sepolia/protocol/GhoSafeIDSepolia.sol\":\"GhoSafeIDSepolia\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev The new default admin is not a valid default admin.\\n     */\\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\\n\\n    /**\\n     * @dev At least one of the following rules was violated:\\n     *\\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\\n     */\\n    error AccessControlEnforcedDefaultAdminRules();\\n\\n    /**\\n     * @dev The delay for transferring the default admin delay is enforced and\\n     * the operation must wait until `schedule`.\\n     *\\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\\n     */\\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\\n\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x969a4661694319a003d037ccbf7c8310f8994d746b763c933d3f76d906e67203\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IGhoSafeAccessManagerSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IGhoSafeAccessManagerSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IAccessControlDefaultAdminRules } from \\\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\\\";\\n\\n/**\\n * @title IGhoSafeAccessManagerSepolia Contract Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the GhoSafeAccessManagerSepolia contract\\n * @dev This interface should be implemented by the GhoSafeAccessManagerSepolia contract.\\n */\\ninterface IGhoSafeAccessManagerSepolia is IAccessControlDefaultAdminRules {\\n\\t/**\\n\\t * @notice Returns the role identifier for the ADMIN_ROLE.\\n\\t * @return  bytes32  .\\n\\t */\\n\\tfunction ADMIN_ROLE() external view returns (bytes32);\\n\\n\\t/**\\n\\t * @notice Returns the role identifier for the MINTER_ROLE.\\n\\t * @return  bytes32  .\\n\\t */\\n\\tfunction MINTER_ROLE() external view returns (bytes32);\\n\\n\\t/**\\n\\t * @notice Returns the role identifier for the BURNER_ROLE.\\n\\t * @return  bytes32  .\\n\\t */\\n\\tfunction CREDIT_SCORE_OFFICER_ROLE() external view returns (bytes32);\\n\\n\\t/**\\n\\t * @notice Returns the role identifier for the CREDIT_SCORE_OFFICER_ROLE.\\n\\t * @return  bytes32  .\\n\\t */\\n\\tfunction LOAN_PUBLISHER_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x69764917936d8a501a7c1994949d9fef106d0fbc86101d49252f61eb6057af34\",\"license\":\"MIT\"},\"contracts/Sepolia/interfaces/IGhoSafeIDSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/interfaces/IGhoSafeIDSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IGhoSafeIDSepolia Interface\\n * @author GhoSafe Protocol\\n * @notice Interface for the GhoSafeIDSepolia contract.\\n * @dev This interface should be implemented by the GhoSafeIDSepolia contract.\\n */\\ninterface IGhoSafeIDSepolia {\\n\\t/**\\n\\t * @notice Struct for storing detailed credit score data.\\n\\t * @param loansCount The number of loans taken out by the token owner.\\n\\t * @param totalAmountBorrowed The total amount borrowed by the token owner.\\n\\t * @param totalAmountRepaid The total amount repaid by the token owner.\\n\\t * @param creditScore The credit score of the token owner.\\n\\t **/\\n\\tstruct CreditScoreData {\\n\\t\\tuint256 loansCount;\\n\\t\\tuint256 totalAmountBorrowed;\\n\\t\\tuint256 totalAmountRepaid;\\n\\t\\tuint256 creditScore;\\n\\t}\\n\\n\\t/// @notice Not authorized Caller error\\n\\terror UnauthorizedAccess(address caller);\\n\\t/// @notice Token ID does not exist error\\n\\terror TokenDoesNotExist(uint256 tokenId);\\n\\t/// @notice GhoSafe ID already minted to an address error\\n\\terror GhoSafeIdAlreadyMinted(address owner);\\n\\t/// @notice Transfer not allowed error\\n\\terror TransferNotAllowed();\\n\\t/// @notice Invalid arguments length error\\n\\terror InvalidArgumentsLength(uint256 expected, uint256 actual);\\n\\n\\t/**\\n\\t * @notice Event emitted when a new GhoSafe ID is minted.\\n\\t * @param tokenId The ID of the GhoSafe ID.\\n\\t * @param owner The address of the GhoSafe ID owner.\\n\\t * @param creditScore The credit score of the GhoSafe ID.\\n\\t **/\\n\\tevent GhoSafeIdMinted(\\n\\t\\tuint256 indexed tokenId,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 creditScore\\n\\t);\\n\\n\\t/**\\n\\t * @notice Event emitted when a GhoSafe ID's credit score is updated.\\n\\t * @param tokenId The ID of the GhoSafe ID.\\n\\t * @param creditScore The credit score of the GhoSafe ID.\\n\\t **/\\n\\tevent CreditScoreUpdated(uint256 indexed tokenId, uint256 creditScore);\\n\\n\\t/**\\n\\t * @notice Retrieves the credit score data of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @return creditScoreData The credit score data.\\n\\t */\\n\\tfunction creditScoreDataOf(\\n\\t\\tuint256 _tokenId\\n\\t) external view returns (CreditScoreData memory creditScoreData);\\n\\n\\t/**\\n\\t * @notice Retrieves the GhoSafe ID of a specific address.\\n\\t * @param _owner The address.\\n\\t * @return tokenId The GhoSafe ID.\\n\\t */\\n\\tfunction ghoSafeIdOf(\\n\\t\\taddress _owner\\n\\t) external view returns (uint256 tokenId);\\n\\n\\t/**\\n\\t * @notice Retrieves the balance of a specific address.\\n\\t * @param _owner The address.\\n\\t * @return balance The balance.\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Retrieves the owner of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @return owner The owner.\\n\\t */\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address owner);\\n\\n\\t/**\\n\\t * @notice Checks if the contract implements a specific interface.\\n\\t * @param _interfaceId The interface identifier.\\n\\t * @return isSupported True if the contract implements the interface.\\n\\t */\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 _interfaceId\\n\\t) external view returns (bool isSupported);\\n\\n\\t/**\\n\\t * @notice Returns the URI of the token metadata.\\n\\t * @param _tokenId The token ID.\\n\\t * @return tokenURI The token URI.\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score.\\n\\t * @param _tokenURI The token URI.\\n\\t */\\n\\tfunction safeMint(\\n\\t\\taddress _to,\\n\\t\\tuint256 _initialCreditScore,\\n\\t\\tbytes calldata _tokenURI\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Updates the credit score of a specific token.\\n\\t * @param _tokenId The token ID.\\n\\t * @param _newCreditScore The new credit score.\\n\\t * @param _loansCountIncrement The loans count increment.\\n\\t * @param _totalAmountBorrowedIncrement The total amount borrowed increment.\\n\\t * @param _totalAmountRepaidIncrement The total amount repaid increment.\\n\\t */\\n\\tfunction updateCreditScore(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _newCreditScore,\\n\\t\\tuint256 _loansCountIncrement,\\n\\t\\tuint256 _totalAmountBorrowedIncrement,\\n\\t\\tuint256 _totalAmountRepaidIncrement\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token to the specified address.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score of the token.\\n\\t * @param _tokenURI The token URI of the token.\\n\\t * @dev Only callable by addresses with the MINTER_ROLE.\\n\\t */\\n\\tfunction batchSafeMin(\\n\\t\\taddress[] calldata _to,\\n\\t\\tuint256[] calldata _initialCreditScore,\\n\\t\\tbytes[] calldata _tokenURI\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x0a2c04d10ff7e09e45f4131cc6613f6515ed27e3089d7feadce497114043fda0\",\"license\":\"MIT\"},\"contracts/Sepolia/protocol/GhoSafeIDSepolia.sol\":{\"content\":\"// File: contracts/Sepolia/protocol/GhoSafeIDSepolia.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IGhoSafeAccessManagerSepolia } from \\\"../interfaces/IGhoSafeAccessManagerSepolia.sol\\\";\\nimport { IGhoSafeIDSepolia } from \\\"../interfaces/IGhoSafeIDSepolia.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n/**\\n * @title GhoSafeIDSepolia Contract\\n * @author GhoSafe Protocol\\n * @notice Contract for managing non-transferable tokens associated with users' credit scores.\\n */\\ncontract GhoSafeIDSepolia is IGhoSafeIDSepolia, Context, ERC165 {\\n\\t/// @dev Token ID counter.\\n\\tuint256 private _tokenCounter;\\n\\n\\t/// @dev Access manager contract.\\n\\tIGhoSafeAccessManagerSepolia internal immutable ACCESS_MANAGER;\\n\\n\\t/// @notice Token name.\\n\\tstring public name;\\n\\n\\t/// @notice Token symbol.\\n\\tstring public symbol;\\n\\n\\t/// @dev Mapping from tokenId to the owner address.\\n\\tmapping(uint256 => address) private _owners;\\n\\t/// @dev Mapping from owner address to tokenId.\\n\\tmapping(address => uint256) private _ghoSafeIds;\\n\\t/// @dev Mapping from tokenId to Credit Score data.\\n\\tmapping(uint256 => CreditScoreData) private _creditScoreData;\\n\\t/// @dev Mapping from tokenId to token URI.\\n\\tmapping(uint256 => bytes) private _tokenURIs;\\n\\n\\t/**\\n\\t * @notice Initializes the contract.\\n\\t * @param _name The token name.\\n\\t * @param _symbol The token symbol.\\n\\t * @param _accessManager The address of the access manager contract.\\n\\t */\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tIGhoSafeAccessManagerSepolia _accessManager\\n\\t) {\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tACCESS_MANAGER = _accessManager;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the credit score data of a specific token.\\n\\t * @param _tokenId The token ID to retrieve the credit score data of.\\n\\t * @return creditScoreData The credit score data of the specified token.\\n\\t */\\n\\tfunction creditScoreDataOf(\\n\\t\\tuint256 _tokenId\\n\\t) external view returns (CreditScoreData memory creditScoreData) {\\n\\t\\tif (_owners[_tokenId] == address(0)) {\\n\\t\\t\\trevert TokenDoesNotExist(_tokenId);\\n\\t\\t}\\n\\t\\tcreditScoreData = _creditScoreData[_tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the GhoSafe ID of a specific address.\\n\\t * @param _owner The address to retrieve the GhoSafe ID of.\\n\\t * @return tokenId The GhoSafe ID of the specified address.\\n\\t */\\n\\tfunction ghoSafeIdOf(\\n\\t\\taddress _owner\\n\\t) external view returns (uint256 tokenId) {\\n\\t\\ttokenId = _ghoSafeIds[_owner];\\n\\t\\tif (tokenId == 0) {\\n\\t\\t\\trevert TokenDoesNotExist(tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the balance of a specific address.\\n\\t * @param _owner The address to retrieve the balance of.\\n\\t * @return balance The balance of the specified address.\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance) {\\n\\t\\tbalance = _ghoSafeIds[_owner] == 0 ? 0 : 1;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the owner of a specific token.\\n\\t * @param _tokenId The token ID to retrieve the owner of.\\n\\t * @return owner The owner of the specified token.\\n\\t */\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address owner) {\\n\\t\\towner = _owners[_tokenId];\\n\\t\\tif (owner == address(0)) {\\n\\t\\t\\trevert TokenDoesNotExist(_tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will always return false as the token is non-transferable.\\n\\t */\\n\\tfunction isApprovedForAll(\\n\\t\\taddress,\\n\\t\\taddress\\n\\t) external pure returns (bool isApproved) {\\n\\t\\tisApproved = false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns true if this contract implements the interface defined by interfaceId. See the corresponding EIP section to learn more about how these ids are created.\\n\\t * @param  _interfaceId  The interface identifier, as specified in ERC-165.\\n\\t * @return isSupported  True if the contract implements interfaceId.\\n\\t */\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 _interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(IGhoSafeIDSepolia, ERC165)\\n\\t\\treturns (bool isSupported)\\n\\t{\\n\\t\\tisSupported = (_interfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(_interfaceId));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the URI of the token metadata.\\n\\t * @param _tokenId The ID of the token to get the URI of.\\n\\t * @return A string representing the token URI.\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) public view returns (string memory) {\\n\\t\\t// Reverts if the token does not exist.\\n\\t\\tif (_owners[_tokenId] == address(0)) {\\n\\t\\t\\trevert TokenDoesNotExist(_tokenId);\\n\\t\\t}\\n\\t\\t// Returns the URI\\n\\t\\treturn (\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\t\\t\\tBase64.encode(_tokenURIs[_tokenId])\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token to the specified address.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score of the token.\\n\\t * @param _tokenURI The token URI of the token.\\n\\t * @dev Only callable by addresses with the MINTER_ROLE.\\n\\t */\\n\\tfunction safeMint(\\n\\t\\taddress _to,\\n\\t\\tuint256 _initialCreditScore,\\n\\t\\tbytes calldata _tokenURI\\n\\t) external {\\n\\t\\tif (!ACCESS_MANAGER.hasRole(keccak256(\\\"MINTER_ROLE\\\"), msg.sender)) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\t\\tif (_ghoSafeIds[_to] != 0) {\\n\\t\\t\\trevert GhoSafeIdAlreadyMinted(_to);\\n\\t\\t}\\n\\t\\tuint256 tokenId = ++_tokenCounter;\\n\\t\\t_owners[tokenId] = _to;\\n\\t\\t_ghoSafeIds[_to] = tokenId;\\n\\t\\t_creditScoreData[tokenId].creditScore = _initialCreditScore;\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t\\temit GhoSafeIdMinted(tokenId, _to, _initialCreditScore);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mints a new GhoSafe ID token to the specified address.\\n\\t * @param _to The address to mint the token to.\\n\\t * @param _initialCreditScore The initial credit score of the token.\\n\\t * @param _tokenURI The token URI of the token.\\n\\t * @dev Only callable by addresses with the MINTER_ROLE.\\n\\t */\\n\\tfunction batchSafeMin(\\n\\t\\taddress[] calldata _to,\\n\\t\\tuint256[] calldata _initialCreditScore,\\n\\t\\tbytes[] calldata _tokenURI\\n\\t) external {\\n\\t\\tif (!ACCESS_MANAGER.hasRole(keccak256(\\\"MINTER_ROLE\\\"), msg.sender)) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\t\\tif (_to.length != _initialCreditScore.length) {\\n\\t\\t\\trevert InvalidArgumentsLength(\\n\\t\\t\\t\\t_initialCreditScore.length,\\n\\t\\t\\t\\t_to.length\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\tif (_to.length != _tokenURI.length) {\\n\\t\\t\\trevert InvalidArgumentsLength(_tokenURI.length, _to.length);\\n\\t\\t}\\n\\t\\tfor (uint256 i = 0; i < _to.length; i++) {\\n\\t\\t\\tif (_ghoSafeIds[_to[i]] != 0) {\\n\\t\\t\\t\\trevert GhoSafeIdAlreadyMinted(_to[i]);\\n\\t\\t\\t}\\n\\t\\t\\tuint256 tokenId = ++_tokenCounter;\\n\\t\\t\\t_owners[tokenId] = _to[i];\\n\\t\\t\\t_ghoSafeIds[_to[i]] = tokenId;\\n\\t\\t\\t_creditScoreData[tokenId].creditScore = _initialCreditScore[i];\\n\\t\\t\\t_tokenURIs[tokenId] = _tokenURI[i];\\n\\t\\t\\temit GhoSafeIdMinted(tokenId, _to[i], _initialCreditScore[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the credit score of a specific token.\\n\\t * @param _tokenId The token ID to update.\\n\\t * @param _newCreditScore The new credit score of the token.\\n\\t * @param _loansCountIncrement The amount to increment the loans count by.\\n\\t * @param _totalAmountBorrowedIncrement The amount to increment the total amount borrowed by.\\n\\t * @param _totalAmountRepaidIncrement The amount to increment the total amount repaid by.\\n\\t * @dev Only callable by addresses with the CREDIT_SCORE_OFFICER_ROLE.\\n\\t */\\n\\tfunction updateCreditScore(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _newCreditScore,\\n\\t\\tuint256 _loansCountIncrement,\\n\\t\\tuint256 _totalAmountBorrowedIncrement,\\n\\t\\tuint256 _totalAmountRepaidIncrement\\n\\t) external {\\n\\t\\tif (_owners[_tokenId] == address(0)) {\\n\\t\\t\\trevert TokenDoesNotExist(_tokenId);\\n\\t\\t}\\n\\t\\tif (\\n\\t\\t\\t!ACCESS_MANAGER.hasRole(\\n\\t\\t\\t\\tkeccak256(\\\"CREDIT_SCORE_OFFICER_ROLE\\\"),\\n\\t\\t\\t\\tmsg.sender\\n\\t\\t\\t)\\n\\t\\t) {\\n\\t\\t\\trevert UnauthorizedAccess(msg.sender);\\n\\t\\t}\\n\\t\\t_creditScoreData[_tokenId].loansCount += _loansCountIncrement;\\n\\t\\t_creditScoreData[_tokenId]\\n\\t\\t\\t.totalAmountBorrowed += _totalAmountBorrowedIncrement;\\n\\t\\t_creditScoreData[_tokenId]\\n\\t\\t\\t.totalAmountRepaid += _totalAmountRepaidIncrement;\\n\\t\\t_creditScoreData[_tokenId].creditScore = _newCreditScore;\\n\\t\\temit CreditScoreUpdated(_tokenId, _newCreditScore);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will revert as the token is non-transferable.\\n\\t */\\n\\tfunction transferFrom(address, address, uint256) external pure {\\n\\t\\trevert TransferNotAllowed();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will revert as the token is non-transferable.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes memory\\n\\t) external pure {\\n\\t\\trevert TransferNotAllowed();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will revert as the token is non-transferable.\\n\\t */\\n\\tfunction safeTransferFrom(address, address, uint256) external pure {\\n\\t\\trevert TransferNotAllowed();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will revert as the token is non-transferable.\\n\\t */\\n\\tfunction setApprovalForAll(address, bool) external pure {\\n\\t\\trevert TransferNotAllowed();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the token URI of a specific token.\\n\\t * @dev Will revert as the token is non-transferable.\\n\\t */\\n\\tfunction approve(address, uint256) external pure {\\n\\t\\trevert TransferNotAllowed();\\n\\t}\\n}\\n\",\"keccak256\":\"0x6331932155f06e0dc2dddde33a2005523130b56d2466b6e4c5a2e4d91c9ed0f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620018d2380380620018d283398101604081905262000034916200012f565b60016200004284826200024d565b5060026200005183826200024d565b506001600160a01b031660805250620003199050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008f57600080fd5b81516001600160401b0380821115620000ac57620000ac62000067565b604051601f8301601f19908116603f01168101908282118183101715620000d757620000d762000067565b8160405283815260209250866020858801011115620000f557600080fd5b600091505b83821015620001195785820183015181830184015290820190620000fa565b6000602085830101528094505050505092915050565b6000806000606084860312156200014557600080fd5b83516001600160401b03808211156200015d57600080fd5b6200016b878388016200007d565b945060208601519150808211156200018257600080fd5b5062000191868287016200007d565b604086015190935090506001600160a01b0381168114620001b157600080fd5b809150509250925092565b600181811c90821680620001d157607f821691505b602082108103620001f257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000248576000816000526020600020601f850160051c81016020861015620002235750805b601f850160051c820191505b8181101562000244578281556001016200022f565b5050505b505050565b81516001600160401b0381111562000269576200026962000067565b62000281816200027a8454620001bc565b84620001f8565b602080601f831160018114620002b95760008415620002a05750858301515b600019600386901b1c1916600185901b17855562000244565b600085815260208120601f198616915b82811015620002ea57888601518255948401946001909101908401620002c9565b5085821015620003095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161158f620003436000396000818161049d0152818161063001526107fd015261158f6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806384ad21a6116100a2578063a22cb46511610071578063a22cb46514610210578063a5d318dd1461021e578063b88d4fde14610264578063c87b56dd14610272578063e985e9c51461028557600080fd5b806384ad21a6146101cf5780638832e6e3146101e25780638b86f232146101f557806395d89b411461020857600080fd5b8063336abacf116100de578063336abacf1461017057806342842e0e146101625780636352211e1461019157806370a08231146101bc57600080fd5b806301ffc9a71461011057806306fdde0314610138578063095ea7b31461014d57806323b872dd14610162575b600080fd5b61012361011e366004610e45565b61029b565b60405190151581526020015b60405180910390f35b6101406102d2565b60405161012f9190610e9a565b61016061015b366004610ee4565b610360565b005b61016061015b366004610f0e565b61018361017e366004610f4a565b610379565b60405190815260200161012f565b6101a461019f366004610f65565b6103c0565b6040516001600160a01b03909116815260200161012f565b6101836101ca366004610f4a565b6103f9565b6101606101dd366004610f7e565b61042a565b6101606101f0366004610fb9565b6105f5565b61016061020336600461108c565b6107c2565b610140610b3b565b61016061015b366004611137565b61023161022c366004610f65565b610b48565b60405161012f91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61016061015b366004611184565b610140610280366004610f65565b610bf0565b610123610293366004611260565b600092915050565b60006001600160e01b03198216635b5e139f60e01b14806102cc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600180546102df90611293565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90611293565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b505050505081565b604051638cd22d1960e01b815260040160405180910390fd5b6001600160a01b038116600090815260046020526040812054908190036103bb5760405163c927e5bf60e01b8152600481018290526024015b60405180910390fd5b919050565b6000818152600360205260409020546001600160a01b0316806103bb5760405163c927e5bf60e01b8152600481018390526024016103b2565b6001600160a01b0381166000908152600460205260408120541561041e576001610421565b60005b60ff1692915050565b6000858152600360205260409020546001600160a01b03166104625760405163c927e5bf60e01b8152600481018690526024016103b2565b604051632474521560e21b81527fad68326f8888db4a16a1a0e2398b724e80fab86f81bd4f24970ba52a88642f1060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051091906112cd565b61052f57604051633733be5960e21b81523360048201526024016103b2565b6000858152600560205260408120805485929061054d908490611300565b909155505060008581526005602052604081206001018054849290610573908490611300565b909155505060008581526005602052604081206002018054839290610599908490611300565b9091555050600085815260056020526040908190206003018590555185907fa327d338bc836383f6e1e88c1cc3f2453f57da29acdb8c91f12c591be40e00d7906105e69087815260200190565b60405180910390a25050505050565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906112cd565b6106c257604051633733be5960e21b81523360048201526024016103b2565b6001600160a01b0384166000908152600460205260409020541561070457604051638de42d4360e01b81526001600160a01b03851660048201526024016103b2565b6000806000815461071490611313565b9182905550600081815260036020818152604080842080546001600160a01b0319166001600160a01b038c169081179091558452600482528084208590558484526005825280842090920188905560069052902090915061077683858361137d565b50846001600160a01b0316817f4f97ad43bce70085fae73efc40e2b85ed4422da1b4084248689d52b0180db43c866040516107b391815260200190565b60405180910390a35050505050565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087091906112cd565b61088f57604051633733be5960e21b81523360048201526024016103b2565b8483146108b9576040516337dffdad60e21b815260048101849052602481018690526044016103b2565b8481146108e3576040516337dffdad60e21b815260048101829052602481018690526044016103b2565b60005b85811015610b3257600460008888848181106109045761090461143e565b90506020020160208101906109199190610f4a565b6001600160a01b03168152602081019190915260400160002054156109845786868281811061094a5761094a61143e565b905060200201602081019061095f9190610f4a565b604051638de42d4360e01b81526001600160a01b0390911660048201526024016103b2565b6000806000815461099490611313565b918290555090508787838181106109ad576109ad61143e565b90506020020160208101906109c29190610f4a565b600082815260036020526040812080546001600160a01b0319166001600160a01b03939093169290921790915581906004908a8a86818110610a0657610a0661143e565b9050602002016020810190610a1b9190610f4a565b6001600160a01b03168152602081019190915260400160002055858583818110610a4757610a4761143e565b905060200201356005600083815260200190815260200160002060030181905550838383818110610a7a57610a7a61143e565b9050602002810190610a8c9190611454565b600083815260066020526040902091610aa691908361137d565b50878783818110610ab957610ab961143e565b9050602002016020810190610ace9190610f4a565b6001600160a01b0316817f4f97ad43bce70085fae73efc40e2b85ed4422da1b4084248689d52b0180db43c888886818110610b0b57610b0b61143e565b90506020020135604051610b2191815260200190565b60405180910390a3506001016108e6565b50505050505050565b600280546102df90611293565b610b736040518060800160405280600081526020016000815260200160008152602001600081525090565b6000828152600360205260409020546001600160a01b0316610bab5760405163c927e5bf60e01b8152600481018390526024016103b2565b50600090815260056020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b6000818152600360205260409020546060906001600160a01b0316610c2b5760405163c927e5bf60e01b8152600481018390526024016103b2565b60008281526006602052604090208054610ccc9190610c4990611293565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7590611293565b8015610cc25780601f10610c9757610100808354040283529160200191610cc2565b820191906000526020600020905b815481529060010190602001808311610ca557829003601f168201915b5050505050610cf2565b604051602001610cdc919061149b565b6040516020818303038152906040529050919050565b60608151600003610d1157505060408051602081019091526000815290565b600060405180606001604052806040815260200161151a6040913990506000600384516002610d409190611300565b610d4a91906114e0565b610d55906004611502565b67ffffffffffffffff811115610d6d57610d6d61116e565b6040519080825280601f01601f191660200182016040528015610d97576020820181803683370190505b509050600182016020820185865187015b80821015610e03576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610da8565b5050600386510660018114610e1f5760028114610e3257610e3a565b603d6001830353603d6002830353610e3a565b603d60018303535b509195945050505050565b600060208284031215610e5757600080fd5b81356001600160e01b031981168114610e6f57600080fd5b9392505050565b60005b83811015610e91578181015183820152602001610e79565b50506000910152565b6020815260008251806020840152610eb9816040850160208701610e76565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146103bb57600080fd5b60008060408385031215610ef757600080fd5b610f0083610ecd565b946020939093013593505050565b600080600060608486031215610f2357600080fd5b610f2c84610ecd565b9250610f3a60208501610ecd565b9150604084013590509250925092565b600060208284031215610f5c57600080fd5b610e6f82610ecd565b600060208284031215610f7757600080fd5b5035919050565b600080600080600060a08688031215610f9657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060608587031215610fcf57600080fd5b610fd885610ecd565b935060208501359250604085013567ffffffffffffffff80821115610ffc57600080fd5b818701915087601f83011261101057600080fd5b81358181111561101f57600080fd5b88602082850101111561103157600080fd5b95989497505060200194505050565b60008083601f84011261105257600080fd5b50813567ffffffffffffffff81111561106a57600080fd5b6020830191508360208260051b850101111561108557600080fd5b9250929050565b600080600080600080606087890312156110a557600080fd5b863567ffffffffffffffff808211156110bd57600080fd5b6110c98a838b01611040565b909850965060208901359150808211156110e257600080fd5b6110ee8a838b01611040565b9096509450604089013591508082111561110757600080fd5b5061111489828a01611040565b979a9699509497509295939492505050565b801515811461113457600080fd5b50565b6000806040838503121561114a57600080fd5b61115383610ecd565b9150602083013561116381611126565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561119a57600080fd5b6111a385610ecd565b93506111b160208601610ecd565b925060408501359150606085013567ffffffffffffffff808211156111d557600080fd5b818701915087601f8301126111e957600080fd5b8135818111156111fb576111fb61116e565b604051601f8201601f19908116603f011681019083821181831017156112235761122361116e565b816040528281528a602084870101111561123c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561127357600080fd5b61127c83610ecd565b915061128a60208401610ecd565b90509250929050565b600181811c908216806112a757607f821691505b6020821081036112c757634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156112df57600080fd5b8151610e6f81611126565b634e487b7160e01b600052601160045260246000fd5b808201808211156102cc576102cc6112ea565b600060018201611325576113256112ea565b5060010190565b601f821115611378576000816000526020600020601f850160051c810160208610156113555750805b601f850160051c820191505b8181101561137457828155600101611361565b5050505b505050565b67ffffffffffffffff8311156113955761139561116e565b6113a9836113a38354611293565b8361132c565b6000601f8411600181146113dd57600085156113c55750838201355b600019600387901b1c1916600186901b178355611437565b600083815260209020601f19861690835b8281101561140e57868501358255602094850194600190920191016113ee565b508682101561142b5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261146b57600080fd5b83018035915067ffffffffffffffff82111561148657600080fd5b60200191503681900382131561108557600080fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114d381601d850160208701610e76565b91909101601d0192915050565b6000826114fd57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176102cc576102cc6112ea56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220bff33d0d6e2fd886e9d97b981dd5523c6f2913f1c08ea36d0d4dfe97f1744aae64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806384ad21a6116100a2578063a22cb46511610071578063a22cb46514610210578063a5d318dd1461021e578063b88d4fde14610264578063c87b56dd14610272578063e985e9c51461028557600080fd5b806384ad21a6146101cf5780638832e6e3146101e25780638b86f232146101f557806395d89b411461020857600080fd5b8063336abacf116100de578063336abacf1461017057806342842e0e146101625780636352211e1461019157806370a08231146101bc57600080fd5b806301ffc9a71461011057806306fdde0314610138578063095ea7b31461014d57806323b872dd14610162575b600080fd5b61012361011e366004610e45565b61029b565b60405190151581526020015b60405180910390f35b6101406102d2565b60405161012f9190610e9a565b61016061015b366004610ee4565b610360565b005b61016061015b366004610f0e565b61018361017e366004610f4a565b610379565b60405190815260200161012f565b6101a461019f366004610f65565b6103c0565b6040516001600160a01b03909116815260200161012f565b6101836101ca366004610f4a565b6103f9565b6101606101dd366004610f7e565b61042a565b6101606101f0366004610fb9565b6105f5565b61016061020336600461108c565b6107c2565b610140610b3b565b61016061015b366004611137565b61023161022c366004610f65565b610b48565b60405161012f91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61016061015b366004611184565b610140610280366004610f65565b610bf0565b610123610293366004611260565b600092915050565b60006001600160e01b03198216635b5e139f60e01b14806102cc57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600180546102df90611293565b80601f016020809104026020016040519081016040528092919081815260200182805461030b90611293565b80156103585780601f1061032d57610100808354040283529160200191610358565b820191906000526020600020905b81548152906001019060200180831161033b57829003601f168201915b505050505081565b604051638cd22d1960e01b815260040160405180910390fd5b6001600160a01b038116600090815260046020526040812054908190036103bb5760405163c927e5bf60e01b8152600481018290526024015b60405180910390fd5b919050565b6000818152600360205260409020546001600160a01b0316806103bb5760405163c927e5bf60e01b8152600481018390526024016103b2565b6001600160a01b0381166000908152600460205260408120541561041e576001610421565b60005b60ff1692915050565b6000858152600360205260409020546001600160a01b03166104625760405163c927e5bf60e01b8152600481018690526024016103b2565b604051632474521560e21b81527fad68326f8888db4a16a1a0e2398b724e80fab86f81bd4f24970ba52a88642f1060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051091906112cd565b61052f57604051633733be5960e21b81523360048201526024016103b2565b6000858152600560205260408120805485929061054d908490611300565b909155505060008581526005602052604081206001018054849290610573908490611300565b909155505060008581526005602052604081206002018054839290610599908490611300565b9091555050600085815260056020526040908190206003018590555185907fa327d338bc836383f6e1e88c1cc3f2453f57da29acdb8c91f12c591be40e00d7906105e69087815260200190565b60405180910390a25050505050565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a391906112cd565b6106c257604051633733be5960e21b81523360048201526024016103b2565b6001600160a01b0384166000908152600460205260409020541561070457604051638de42d4360e01b81526001600160a01b03851660048201526024016103b2565b6000806000815461071490611313565b9182905550600081815260036020818152604080842080546001600160a01b0319166001600160a01b038c169081179091558452600482528084208590558484526005825280842090920188905560069052902090915061077683858361137d565b50846001600160a01b0316817f4f97ad43bce70085fae73efc40e2b85ed4422da1b4084248689d52b0180db43c866040516107b391815260200190565b60405180910390a35050505050565b604051632474521560e21b81527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087091906112cd565b61088f57604051633733be5960e21b81523360048201526024016103b2565b8483146108b9576040516337dffdad60e21b815260048101849052602481018690526044016103b2565b8481146108e3576040516337dffdad60e21b815260048101829052602481018690526044016103b2565b60005b85811015610b3257600460008888848181106109045761090461143e565b90506020020160208101906109199190610f4a565b6001600160a01b03168152602081019190915260400160002054156109845786868281811061094a5761094a61143e565b905060200201602081019061095f9190610f4a565b604051638de42d4360e01b81526001600160a01b0390911660048201526024016103b2565b6000806000815461099490611313565b918290555090508787838181106109ad576109ad61143e565b90506020020160208101906109c29190610f4a565b600082815260036020526040812080546001600160a01b0319166001600160a01b03939093169290921790915581906004908a8a86818110610a0657610a0661143e565b9050602002016020810190610a1b9190610f4a565b6001600160a01b03168152602081019190915260400160002055858583818110610a4757610a4761143e565b905060200201356005600083815260200190815260200160002060030181905550838383818110610a7a57610a7a61143e565b9050602002810190610a8c9190611454565b600083815260066020526040902091610aa691908361137d565b50878783818110610ab957610ab961143e565b9050602002016020810190610ace9190610f4a565b6001600160a01b0316817f4f97ad43bce70085fae73efc40e2b85ed4422da1b4084248689d52b0180db43c888886818110610b0b57610b0b61143e565b90506020020135604051610b2191815260200190565b60405180910390a3506001016108e6565b50505050505050565b600280546102df90611293565b610b736040518060800160405280600081526020016000815260200160008152602001600081525090565b6000828152600360205260409020546001600160a01b0316610bab5760405163c927e5bf60e01b8152600481018390526024016103b2565b50600090815260056020908152604091829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015290565b6000818152600360205260409020546060906001600160a01b0316610c2b5760405163c927e5bf60e01b8152600481018390526024016103b2565b60008281526006602052604090208054610ccc9190610c4990611293565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7590611293565b8015610cc25780601f10610c9757610100808354040283529160200191610cc2565b820191906000526020600020905b815481529060010190602001808311610ca557829003601f168201915b5050505050610cf2565b604051602001610cdc919061149b565b6040516020818303038152906040529050919050565b60608151600003610d1157505060408051602081019091526000815290565b600060405180606001604052806040815260200161151a6040913990506000600384516002610d409190611300565b610d4a91906114e0565b610d55906004611502565b67ffffffffffffffff811115610d6d57610d6d61116e565b6040519080825280601f01601f191660200182016040528015610d97576020820181803683370190505b509050600182016020820185865187015b80821015610e03576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610da8565b5050600386510660018114610e1f5760028114610e3257610e3a565b603d6001830353603d6002830353610e3a565b603d60018303535b509195945050505050565b600060208284031215610e5757600080fd5b81356001600160e01b031981168114610e6f57600080fd5b9392505050565b60005b83811015610e91578181015183820152602001610e79565b50506000910152565b6020815260008251806020840152610eb9816040850160208701610e76565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146103bb57600080fd5b60008060408385031215610ef757600080fd5b610f0083610ecd565b946020939093013593505050565b600080600060608486031215610f2357600080fd5b610f2c84610ecd565b9250610f3a60208501610ecd565b9150604084013590509250925092565b600060208284031215610f5c57600080fd5b610e6f82610ecd565b600060208284031215610f7757600080fd5b5035919050565b600080600080600060a08688031215610f9657600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060608587031215610fcf57600080fd5b610fd885610ecd565b935060208501359250604085013567ffffffffffffffff80821115610ffc57600080fd5b818701915087601f83011261101057600080fd5b81358181111561101f57600080fd5b88602082850101111561103157600080fd5b95989497505060200194505050565b60008083601f84011261105257600080fd5b50813567ffffffffffffffff81111561106a57600080fd5b6020830191508360208260051b850101111561108557600080fd5b9250929050565b600080600080600080606087890312156110a557600080fd5b863567ffffffffffffffff808211156110bd57600080fd5b6110c98a838b01611040565b909850965060208901359150808211156110e257600080fd5b6110ee8a838b01611040565b9096509450604089013591508082111561110757600080fd5b5061111489828a01611040565b979a9699509497509295939492505050565b801515811461113457600080fd5b50565b6000806040838503121561114a57600080fd5b61115383610ecd565b9150602083013561116381611126565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561119a57600080fd5b6111a385610ecd565b93506111b160208601610ecd565b925060408501359150606085013567ffffffffffffffff808211156111d557600080fd5b818701915087601f8301126111e957600080fd5b8135818111156111fb576111fb61116e565b604051601f8201601f19908116603f011681019083821181831017156112235761122361116e565b816040528281528a602084870101111561123c57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561127357600080fd5b61127c83610ecd565b915061128a60208401610ecd565b90509250929050565b600181811c908216806112a757607f821691505b6020821081036112c757634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156112df57600080fd5b8151610e6f81611126565b634e487b7160e01b600052601160045260246000fd5b808201808211156102cc576102cc6112ea565b600060018201611325576113256112ea565b5060010190565b601f821115611378576000816000526020600020601f850160051c810160208610156113555750805b601f850160051c820191505b8181101561137457828155600101611361565b5050505b505050565b67ffffffffffffffff8311156113955761139561116e565b6113a9836113a38354611293565b8361132c565b6000601f8411600181146113dd57600085156113c55750838201355b600019600387901b1c1916600186901b178355611437565b600083815260209020601f19861690835b8281101561140e57868501358255602094850194600190920191016113ee565b508682101561142b5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261146b57600080fd5b83018035915067ffffffffffffffff82111561148657600080fd5b60200191503681900382131561108557600080fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114d381601d850160208701610e76565b91909101601d0192915050565b6000826114fd57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176102cc576102cc6112ea56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220bff33d0d6e2fd886e9d97b981dd5523c6f2913f1c08ea36d0d4dfe97f1744aae64736f6c63430008170033",
  "devdoc": {
    "author": "GhoSafe Protocol",
    "events": {
      "CreditScoreUpdated(uint256,uint256)": {
        "params": {
          "creditScore": "The credit score of the GhoSafe ID.*",
          "tokenId": "The ID of the GhoSafe ID."
        }
      },
      "GhoSafeIdMinted(uint256,address,uint256)": {
        "params": {
          "creditScore": "The credit score of the GhoSafe ID.*",
          "owner": "The address of the GhoSafe ID owner.",
          "tokenId": "The ID of the GhoSafe ID."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Will revert as the token is non-transferable."
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "The address to retrieve the balance of."
        },
        "returns": {
          "balance": "The balance of the specified address."
        }
      },
      "batchSafeMin(address[],uint256[],bytes[])": {
        "details": "Only callable by addresses with the MINTER_ROLE.",
        "params": {
          "_initialCreditScore": "The initial credit score of the token.",
          "_to": "The address to mint the token to.",
          "_tokenURI": "The token URI of the token."
        }
      },
      "constructor": {
        "params": {
          "_accessManager": "The address of the access manager contract.",
          "_name": "The token name.",
          "_symbol": "The token symbol."
        }
      },
      "creditScoreDataOf(uint256)": {
        "params": {
          "_tokenId": "The token ID to retrieve the credit score data of."
        },
        "returns": {
          "creditScoreData": "The credit score data of the specified token."
        }
      },
      "ghoSafeIdOf(address)": {
        "params": {
          "_owner": "The address to retrieve the GhoSafe ID of."
        },
        "returns": {
          "tokenId": "The GhoSafe ID of the specified address."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Will always return false as the token is non-transferable."
      },
      "ownerOf(uint256)": {
        "params": {
          "_tokenId": "The token ID to retrieve the owner of."
        },
        "returns": {
          "owner": "The owner of the specified token."
        }
      },
      "safeMint(address,uint256,bytes)": {
        "details": "Only callable by addresses with the MINTER_ROLE.",
        "params": {
          "_initialCreditScore": "The initial credit score of the token.",
          "_to": "The address to mint the token to.",
          "_tokenURI": "The token URI of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Will revert as the token is non-transferable."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Will revert as the token is non-transferable."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Will revert as the token is non-transferable."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface identifier, as specified in ERC-165."
        },
        "returns": {
          "isSupported": " True if the contract implements interfaceId."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "The ID of the token to get the URI of."
        },
        "returns": {
          "_0": "A string representing the token URI."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Will revert as the token is non-transferable."
      },
      "updateCreditScore(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Only callable by addresses with the CREDIT_SCORE_OFFICER_ROLE.",
        "params": {
          "_loansCountIncrement": "The amount to increment the loans count by.",
          "_newCreditScore": "The new credit score of the token.",
          "_tokenId": "The token ID to update.",
          "_totalAmountBorrowedIncrement": "The amount to increment the total amount borrowed by.",
          "_totalAmountRepaidIncrement": "The amount to increment the total amount repaid by."
        }
      }
    },
    "stateVariables": {
      "ACCESS_MANAGER": {
        "details": "Access manager contract."
      },
      "_creditScoreData": {
        "details": "Mapping from tokenId to Credit Score data."
      },
      "_ghoSafeIds": {
        "details": "Mapping from owner address to tokenId."
      },
      "_owners": {
        "details": "Mapping from tokenId to the owner address."
      },
      "_tokenCounter": {
        "details": "Token ID counter."
      },
      "_tokenURIs": {
        "details": "Mapping from tokenId to token URI."
      }
    },
    "title": "GhoSafeIDSepolia Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "GhoSafeIdAlreadyMinted(address)": [
        {
          "notice": "GhoSafe ID already minted to an address error"
        }
      ],
      "InvalidArgumentsLength(uint256,uint256)": [
        {
          "notice": "Invalid arguments length error"
        }
      ],
      "TokenDoesNotExist(uint256)": [
        {
          "notice": "Token ID does not exist error"
        }
      ],
      "TransferNotAllowed()": [
        {
          "notice": "Transfer not allowed error"
        }
      ],
      "UnauthorizedAccess(address)": [
        {
          "notice": "Not authorized Caller error"
        }
      ]
    },
    "events": {
      "CreditScoreUpdated(uint256,uint256)": {
        "notice": "Event emitted when a GhoSafe ID's credit score is updated."
      },
      "GhoSafeIdMinted(uint256,address,uint256)": {
        "notice": "Event emitted when a new GhoSafe ID is minted."
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "balanceOf(address)": {
        "notice": "Retrieves the balance of a specific address."
      },
      "batchSafeMin(address[],uint256[],bytes[])": {
        "notice": "Mints a new GhoSafe ID token to the specified address."
      },
      "constructor": {
        "notice": "Initializes the contract."
      },
      "creditScoreDataOf(uint256)": {
        "notice": "Retrieves the credit score data of a specific token."
      },
      "ghoSafeIdOf(address)": {
        "notice": "Retrieves the GhoSafe ID of a specific address."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "name()": {
        "notice": "Token name."
      },
      "ownerOf(uint256)": {
        "notice": "Retrieves the owner of a specific token."
      },
      "safeMint(address,uint256,bytes)": {
        "notice": "Mints a new GhoSafe ID token to the specified address."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns true if this contract implements the interface defined by interfaceId. See the corresponding EIP section to learn more about how these ids are created."
      },
      "symbol()": {
        "notice": "Token symbol."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the URI of the token metadata."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Retrieves the token URI of a specific token."
      },
      "updateCreditScore(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Updates the credit score of a specific token."
      }
    },
    "notice": "Contract for managing non-transferable tokens associated with users' credit scores.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8319,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "_tokenCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8326,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 8329,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8334,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8339,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "_ghoSafeIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8345,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "_creditScoreData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(CreditScoreData)7495_storage)"
      },
      {
        "astId": 8350,
        "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(CreditScoreData)7495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGhoSafeIDSepolia.CreditScoreData)",
        "numberOfBytes": "32",
        "value": "t_struct(CreditScoreData)7495_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CreditScoreData)7495_storage": {
        "encoding": "inplace",
        "label": "struct IGhoSafeIDSepolia.CreditScoreData",
        "members": [
          {
            "astId": 7488,
            "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
            "label": "loansCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7490,
            "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
            "label": "totalAmountBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7492,
            "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
            "label": "totalAmountRepaid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7494,
            "contract": "contracts/Sepolia/protocol/GhoSafeIDSepolia.sol:GhoSafeIDSepolia",
            "label": "creditScore",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}